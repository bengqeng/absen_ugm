/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/bootstrap.bundle.js":
/*!******************************************!*\
  !*** ./resources/js/bootstrap.bundle.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*!\n  * Bootstrap v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function () {\n  'use strict';\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var _KEY_TO_DIRECTION;\n  var MAX_UID = 1000000;\n  var MILLISECONDS_MULTIPLIER = 1000;\n  var TRANSITION_END = 'transitionend'; // Shout-out Angus Croll (https://goo.gl/pxwQGp)\n\n  var toType = function toType(object) {\n    if (object === null || object === undefined) {\n      return \"\".concat(object);\n    }\n    return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase();\n  };\n  /**\n   * Public Util API\n   */\n\n  var getUID = function getUID(prefix) {\n    do {\n      prefix += Math.floor(Math.random() * MAX_UID);\n    } while (document.getElementById(prefix));\n    return prefix;\n  };\n  var getSelector = function getSelector(element) {\n    var selector = element.getAttribute('data-bs-target');\n    if (!selector || selector === '#') {\n      var hrefAttribute = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,\n      // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n      // `document.querySelector` will rightfully complain it is invalid.\n      // See https://github.com/twbs/bootstrap/issues/32273\n\n      if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {\n        return null;\n      } // Just in case some CMS puts out a full URL with the anchor appended\n\n      if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n        hrefAttribute = \"#\".concat(hrefAttribute.split('#')[1]);\n      }\n      selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;\n    }\n    return selector;\n  };\n  var getSelectorFromElement = function getSelectorFromElement(element) {\n    var selector = getSelector(element);\n    if (selector) {\n      return document.querySelector(selector) ? selector : null;\n    }\n    return null;\n  };\n  var getElementFromSelector = function getElementFromSelector(element) {\n    var selector = getSelector(element);\n    return selector ? document.querySelector(selector) : null;\n  };\n  var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {\n    if (!element) {\n      return 0;\n    } // Get transition-duration of the element\n\n    var _window$getComputedSt = window.getComputedStyle(element),\n      transitionDuration = _window$getComputedSt.transitionDuration,\n      transitionDelay = _window$getComputedSt.transitionDelay;\n    var floatTransitionDuration = Number.parseFloat(transitionDuration);\n    var floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n      return 0;\n    } // If multiple durations are defined, take the first\n\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n  };\n  var triggerTransitionEnd = function triggerTransitionEnd(element) {\n    element.dispatchEvent(new Event(TRANSITION_END));\n  };\n  var isElement$1 = function isElement$1(object) {\n    if (!object || _typeof(object) !== 'object') {\n      return false;\n    }\n    if (typeof object.jquery !== 'undefined') {\n      object = object[0];\n    }\n    return typeof object.nodeType !== 'undefined';\n  };\n  var getElement = function getElement(object) {\n    // it's a jQuery object or a node element\n    if (isElement$1(object)) {\n      return object.jquery ? object[0] : object;\n    }\n    if (typeof object === 'string' && object.length > 0) {\n      return document.querySelector(object);\n    }\n    return null;\n  };\n  var isVisible = function isVisible(element) {\n    if (!isElement$1(element) || element.getClientRects().length === 0) {\n      return false;\n    }\n    var elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'; // Handle `details` element as its content may falsie appear visible when it is closed\n\n    var closedDetails = element.closest('details:not([open])');\n    if (!closedDetails) {\n      return elementIsVisible;\n    }\n    if (closedDetails !== element) {\n      var summary = element.closest('summary');\n      if (summary && summary.parentNode !== closedDetails) {\n        return false;\n      }\n      if (summary === null) {\n        return false;\n      }\n    }\n    return elementIsVisible;\n  };\n  var isDisabled = function isDisabled(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n    if (element.classList.contains('disabled')) {\n      return true;\n    }\n    if (typeof element.disabled !== 'undefined') {\n      return element.disabled;\n    }\n    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n  };\n  var findShadowRoot = function findShadowRoot(element) {\n    if (!document.documentElement.attachShadow) {\n      return null;\n    } // Can find the shadow root otherwise it'll return the document\n\n    if (typeof element.getRootNode === 'function') {\n      var root = element.getRootNode();\n      return root instanceof ShadowRoot ? root : null;\n    }\n    if (element instanceof ShadowRoot) {\n      return element;\n    } // when we don't find a shadow root\n\n    if (!element.parentNode) {\n      return null;\n    }\n    return findShadowRoot(element.parentNode);\n  };\n  var noop = function noop() {};\n  /**\n   * Trick to restart an element's animation\n   *\n   * @param {HTMLElement} element\n   * @return void\n   *\n   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n   */\n\n  var reflow = function reflow(element) {\n    element.offsetHeight; // eslint-disable-line no-unused-expressions\n  };\n\n  var getjQuery = function getjQuery() {\n    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n      return window.jQuery;\n    }\n    return null;\n  };\n  var DOMContentLoadedCallbacks = [];\n  var onDOMContentLoaded = function onDOMContentLoaded(callback) {\n    if (document.readyState === 'loading') {\n      // add listener on the first call when the document is in loading state\n      if (!DOMContentLoadedCallbacks.length) {\n        document.addEventListener('DOMContentLoaded', function () {\n          var _iterator = _createForOfIteratorHelper(DOMContentLoadedCallbacks),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _callback = _step.value;\n              _callback();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n      DOMContentLoadedCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  };\n  var isRTL = function isRTL() {\n    return document.documentElement.dir === 'rtl';\n  };\n  var defineJQueryPlugin = function defineJQueryPlugin(plugin) {\n    onDOMContentLoaded(function () {\n      var $ = getjQuery();\n      /* istanbul ignore if */\n\n      if ($) {\n        var name = plugin.NAME;\n        var JQUERY_NO_CONFLICT = $.fn[name];\n        $.fn[name] = plugin.jQueryInterface;\n        $.fn[name].Constructor = plugin;\n        $.fn[name].noConflict = function () {\n          $.fn[name] = JQUERY_NO_CONFLICT;\n          return plugin.jQueryInterface;\n        };\n      }\n    });\n  };\n  var execute = function execute(callback) {\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n  var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {\n    var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!waitForTransition) {\n      execute(callback);\n      return;\n    }\n    var durationPadding = 5;\n    var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n    var called = false;\n    var handler = function handler(_ref6) {\n      var target = _ref6.target;\n      if (target !== transitionElement) {\n        return;\n      }\n      called = true;\n      transitionElement.removeEventListener(TRANSITION_END, handler);\n      execute(callback);\n    };\n    transitionElement.addEventListener(TRANSITION_END, handler);\n    setTimeout(function () {\n      if (!called) {\n        triggerTransitionEnd(transitionElement);\n      }\n    }, emulatedDuration);\n  };\n  /**\n   * Return the previous/next element of a list.\n   *\n   * @param {array} list    The list of elements\n   * @param activeElement   The active element\n   * @param shouldGetNext   Choose to get next or previous element\n   * @param isCycleAllowed\n   * @return {Element|elem} The proper element\n   */\n\n  var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {\n    var listLength = list.length;\n    var index = list.indexOf(activeElement); // if the element does not exist in the list return an element\n    // depending on the direction and if cycle is allowed\n\n    if (index === -1) {\n      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];\n    }\n    index += shouldGetNext ? 1 : -1;\n    if (isCycleAllowed) {\n      index = (index + listLength) % listLength;\n    }\n    return list[Math.max(0, Math.min(index, listLength - 1))];\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  var stripNameRegex = /\\..*/;\n  var stripUidRegex = /::\\d+$/;\n  var eventRegistry = {}; // Events storage\n\n  var uidEvent = 1;\n  var customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n  /**\n   * Private methods\n   */\n\n  function makeEventUid(element, uid) {\n    return uid && \"\".concat(uid, \"::\").concat(uidEvent++) || element.uidEvent || uidEvent++;\n  }\n  function getElementEvents(element) {\n    var uid = makeEventUid(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      hydrateObj(event, {\n        delegateTarget: element\n      });\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n      return fn.apply(element, [event]);\n    };\n  }\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      var domElements = element.querySelectorAll(selector);\n      for (var target = event.target; target && target !== this; target = target.parentNode) {\n        var _iterator2 = _createForOfIteratorHelper(domElements),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var domElement = _step2.value;\n            if (domElement !== target) {\n              continue;\n            }\n            hydrateObj(event, {\n              delegateTarget: target\n            });\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, selector, fn);\n            }\n            return fn.apply(target, [event]);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    };\n  }\n  function findHandler(events, callable) {\n    var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return Object.values(events).find(function (event) {\n      return event.callable === callable && event.delegationSelector === delegationSelector;\n    });\n  }\n  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n    var isDelegated = typeof handler === 'string'; // todo: tooltip passes `false` instead of selector, so we need to check\n\n    var callable = isDelegated ? delegationFunction : handler || delegationFunction;\n    var typeEvent = getTypeEvent(originalTypeEvent);\n    if (!nativeEvents.has(typeEvent)) {\n      typeEvent = originalTypeEvent;\n    }\n    return [isDelegated, callable, typeEvent];\n  }\n  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n    var _normalizeParameters = normalizeParameters(originalTypeEvent, handler, delegationFunction),\n      _normalizeParameters2 = _slicedToArray(_normalizeParameters, 3),\n      isDelegated = _normalizeParameters2[0],\n      callable = _normalizeParameters2[1],\n      typeEvent = _normalizeParameters2[2]; // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n    // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n    if (originalTypeEvent in customEvents) {\n      var wrapFunction = function wrapFunction(fn) {\n        return function (event) {\n          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n            return fn.call(this, event);\n          }\n        };\n      };\n      callable = wrapFunction(callable);\n    }\n    var events = getElementEvents(element);\n    var handlers = events[typeEvent] || (events[typeEvent] = {});\n    var previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);\n    if (previousFunction) {\n      previousFunction.oneOff = previousFunction.oneOff && oneOff;\n      return;\n    }\n    var uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));\n    var fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);\n    fn.delegationSelector = isDelegated ? handler : null;\n    fn.callable = callable;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, isDelegated);\n  }\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    var fn = findHandler(events[typeEvent], handler, delegationSelector);\n    if (!fn) {\n      return;\n    }\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    var storeElementEvent = events[typeEvent] || {};\n    for (var _i2 = 0, _Object$keys = Object.keys(storeElementEvent); _i2 < _Object$keys.length; _i2++) {\n      var handlerKey = _Object$keys[_i2];\n      if (handlerKey.includes(namespace)) {\n        var event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n      }\n    }\n  }\n  function getTypeEvent(event) {\n    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n    event = event.replace(stripNameRegex, '');\n    return customEvents[event] || event;\n  }\n  var EventHandler = {\n    on: function on(element, event, handler, delegationFunction) {\n      addHandler(element, event, handler, delegationFunction, false);\n    },\n    one: function one(element, event, handler, delegationFunction) {\n      addHandler(element, event, handler, delegationFunction, true);\n    },\n    off: function off(element, originalTypeEvent, handler, delegationFunction) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n      var _normalizeParameters3 = normalizeParameters(originalTypeEvent, handler, delegationFunction),\n        _normalizeParameters4 = _slicedToArray(_normalizeParameters3, 3),\n        isDelegated = _normalizeParameters4[0],\n        callable = _normalizeParameters4[1],\n        typeEvent = _normalizeParameters4[2];\n      var inNamespace = typeEvent !== originalTypeEvent;\n      var events = getElementEvents(element);\n      var storeElementEvent = events[typeEvent] || {};\n      var isNamespace = originalTypeEvent.startsWith('.');\n      if (typeof callable !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!Object.keys(storeElementEvent).length) {\n          return;\n        }\n        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);\n        return;\n      }\n      if (isNamespace) {\n        for (var _i3 = 0, _Object$keys2 = Object.keys(events); _i3 < _Object$keys2.length; _i3++) {\n          var elementEvent = _Object$keys2[_i3];\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        }\n      }\n      for (var _i4 = 0, _Object$keys3 = Object.keys(storeElementEvent); _i4 < _Object$keys3.length; _i4++) {\n        var keyHandlers = _Object$keys3[_i4];\n        var handlerKey = keyHandlers.replace(stripUidRegex, '');\n        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n          var event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n        }\n      }\n    },\n    trigger: function trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n      var $ = getjQuery();\n      var typeEvent = getTypeEvent(event);\n      var inNamespace = event !== typeEvent;\n      var jQueryEvent = null;\n      var bubbles = true;\n      var nativeDispatch = true;\n      var defaultPrevented = false;\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n      var evt = new Event(event, {\n        bubbles: bubbles,\n        cancelable: true\n      });\n      evt = hydrateObj(evt, args);\n      if (defaultPrevented) {\n        evt.preventDefault();\n      }\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n      if (evt.defaultPrevented && jQueryEvent) {\n        jQueryEvent.preventDefault();\n      }\n      return evt;\n    }\n  };\n  function hydrateObj(obj, meta) {\n    var _loop2 = function _loop2() {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n      try {\n        obj[key] = value;\n      } catch (_unused) {\n        Object.defineProperty(obj, key, {\n          configurable: true,\n          get: function get() {\n            return value;\n          }\n        });\n      }\n    };\n    for (var _i5 = 0, _Object$entries = Object.entries(meta || {}); _i5 < _Object$entries.length; _i5++) {\n      _loop2();\n    }\n    return obj;\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n  var elementMap = new Map();\n  var Data = {\n    set: function set(element, key, instance) {\n      if (!elementMap.has(element)) {\n        elementMap.set(element, new Map());\n      }\n      var instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n      // can be removed later when multiple key/instances are fine to be used\n\n      if (!instanceMap.has(key) && instanceMap.size !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(\"Bootstrap doesn't allow more than one instance per element. Bound instance: \".concat(Array.from(instanceMap.keys())[0], \".\"));\n        return;\n      }\n      instanceMap.set(key, instance);\n    },\n    get: function get(element, key) {\n      if (elementMap.has(element)) {\n        return elementMap.get(element).get(key) || null;\n      }\n      return null;\n    },\n    remove: function remove(element, key) {\n      if (!elementMap.has(element)) {\n        return;\n      }\n      var instanceMap = elementMap.get(element);\n      instanceMap[\"delete\"](key); // free up element references if there are no instances left for an element\n\n      if (instanceMap.size === 0) {\n        elementMap[\"delete\"](element);\n      }\n    }\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  function normalizeData(value) {\n    if (value === 'true') {\n      return true;\n    }\n    if (value === 'false') {\n      return false;\n    }\n    if (value === Number(value).toString()) {\n      return Number(value);\n    }\n    if (value === '' || value === 'null') {\n      return null;\n    }\n    if (typeof value !== 'string') {\n      return value;\n    }\n    try {\n      return JSON.parse(decodeURIComponent(value));\n    } catch (_unused) {\n      return value;\n    }\n  }\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, function (chr) {\n      return \"-\".concat(chr.toLowerCase());\n    });\n  }\n  var Manipulator = {\n    setDataAttribute: function setDataAttribute(element, key, value) {\n      element.setAttribute(\"data-bs-\".concat(normalizeDataKey(key)), value);\n    },\n    removeDataAttribute: function removeDataAttribute(element, key) {\n      element.removeAttribute(\"data-bs-\".concat(normalizeDataKey(key)));\n    },\n    getDataAttributes: function getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n      var attributes = {};\n      var bsKeys = Object.keys(element.dataset).filter(function (key) {\n        return key.startsWith('bs') && !key.startsWith('bsConfig');\n      });\n      var _iterator3 = _createForOfIteratorHelper(bsKeys),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n          var pureKey = key.replace(/^bs/, '');\n          pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n          attributes[pureKey] = normalizeData(element.dataset[key]);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return attributes;\n    },\n    getDataAttribute: function getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(\"data-bs-\".concat(normalizeDataKey(key))));\n    }\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/config.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Class definition\n   */\n  var Config = /*#__PURE__*/function () {\n    function Config() {\n      _classCallCheck(this, Config);\n    }\n    _createClass(Config, [{\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = this._mergeConfigObj(config);\n        config = this._configAfterMerge(config);\n        this._typeCheckConfig(config);\n        return config;\n      }\n    }, {\n      key: \"_configAfterMerge\",\n      value: function _configAfterMerge(config) {\n        return config;\n      }\n    }, {\n      key: \"_mergeConfigObj\",\n      value: function _mergeConfigObj(config, element) {\n        var jsonConfig = isElement$1(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse\n\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), _typeof(jsonConfig) === 'object' ? jsonConfig : {}), isElement$1(element) ? Manipulator.getDataAttributes(element) : {}), _typeof(config) === 'object' ? config : {});\n      }\n    }, {\n      key: \"_typeCheckConfig\",\n      value: function _typeCheckConfig(config) {\n        var configTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.DefaultType;\n        for (var _i6 = 0, _Object$keys4 = Object.keys(configTypes); _i6 < _Object$keys4.length; _i6++) {\n          var property = _Object$keys4[_i6];\n          var expectedTypes = configTypes[property];\n          var value = config[property];\n          var valueType = isElement$1(value) ? 'element' : toType(value);\n          if (!new RegExp(expectedTypes).test(valueType)) {\n            throw new TypeError(\"\".concat(this.constructor.NAME.toUpperCase(), \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\".\"));\n          }\n        }\n      }\n    }], [{\n      key: \"Default\",\n      get:\n      // Getters\n      function get() {\n        return {};\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return {};\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        throw new Error('You have to implement the static method \"NAME\", for each component!');\n      }\n    }]);\n    return Config;\n  }();\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): base-component.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n  var VERSION = '5.2.3';\n  /**\n   * Class definition\n   */\n  var BaseComponent = /*#__PURE__*/function (_Config) {\n    _inherits(BaseComponent, _Config);\n    var _super = _createSuper(BaseComponent);\n    function BaseComponent(element, config) {\n      var _this;\n      _classCallCheck(this, BaseComponent);\n      _this = _super.call(this);\n      element = getElement(element);\n      if (!element) {\n        return _possibleConstructorReturn(_this);\n      }\n      _this._element = element;\n      _this._config = _this._getConfig(config);\n      Data.set(_this._element, _this.constructor.DATA_KEY, _assertThisInitialized(_this));\n      return _this;\n    } // Public\n    _createClass(BaseComponent, [{\n      key: \"dispose\",\n      value: function dispose() {\n        Data.remove(this._element, this.constructor.DATA_KEY);\n        EventHandler.off(this._element, this.constructor.EVENT_KEY);\n        var _iterator4 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var propertyName = _step4.value;\n            this[propertyName] = null;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }, {\n      key: \"_queueCallback\",\n      value: function _queueCallback(callback, element) {\n        var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        executeAfterTransition(callback, element, isAnimated);\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = this._mergeConfigObj(config, this._element);\n        config = this._configAfterMerge(config);\n        this._typeCheckConfig(config);\n        return config;\n      } // Static\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance(element) {\n        return Data.get(getElement(element), this.DATA_KEY);\n      }\n    }, {\n      key: \"getOrCreateInstance\",\n      value: function getOrCreateInstance(element) {\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);\n      }\n    }, {\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.\".concat(this.NAME);\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".\".concat(this.DATA_KEY);\n      }\n    }, {\n      key: \"eventName\",\n      value: function eventName(name) {\n        return \"\".concat(name).concat(this.EVENT_KEY);\n      }\n    }]);\n    return BaseComponent;\n  }(Config);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/component-functions.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var enableDismissTrigger = function enableDismissTrigger(component) {\n    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';\n    var clickEvent = \"click.dismiss\".concat(component.EVENT_KEY);\n    var name = component.NAME;\n    EventHandler.on(document, clickEvent, \"[data-bs-dismiss=\\\"\".concat(name, \"\\\"]\"), function (event) {\n      if (['A', 'AREA'].includes(this.tagName)) {\n        event.preventDefault();\n      }\n      if (isDisabled(this)) {\n        return;\n      }\n      var target = getElementFromSelector(this) || this.closest(\".\".concat(name));\n      var instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n\n      instance[method]();\n    });\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): alert.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$f = 'alert';\n  var DATA_KEY$a = 'bs.alert';\n  var EVENT_KEY$b = \".\".concat(DATA_KEY$a);\n  var EVENT_CLOSE = \"close\".concat(EVENT_KEY$b);\n  var EVENT_CLOSED = \"closed\".concat(EVENT_KEY$b);\n  var CLASS_NAME_FADE$5 = 'fade';\n  var CLASS_NAME_SHOW$8 = 'show';\n  /**\n   * Class definition\n   */\n  var Alert = /*#__PURE__*/function (_BaseComponent) {\n    _inherits(Alert, _BaseComponent);\n    var _super2 = _createSuper(Alert);\n    function Alert() {\n      _classCallCheck(this, Alert);\n      return _super2.apply(this, arguments);\n    }\n    _createClass(Alert, [{\n      key: \"close\",\n      value:\n      // Public\n\n      function close() {\n        var _this2 = this;\n        var closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n        if (closeEvent.defaultPrevented) {\n          return;\n        }\n        this._element.classList.remove(CLASS_NAME_SHOW$8);\n        var isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n        this._queueCallback(function () {\n          return _this2._destroyElement();\n        }, this._element, isAnimated);\n      } // Private\n    }, {\n      key: \"_destroyElement\",\n      value: function _destroyElement() {\n        this._element.remove();\n        EventHandler.trigger(this._element, EVENT_CLOSED);\n        this.dispose();\n      } // Static\n    }], [{\n      key: \"NAME\",\n      get:\n      // Getters\n      function get() {\n        return NAME$f;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Alert.getOrCreateInstance(this);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config](this);\n        });\n      }\n    }]);\n    return Alert;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  enableDismissTrigger(Alert, 'close');\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Alert);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): button.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$e = 'button';\n  var DATA_KEY$9 = 'bs.button';\n  var EVENT_KEY$a = \".\".concat(DATA_KEY$9);\n  var DATA_API_KEY$6 = '.data-api';\n  var CLASS_NAME_ACTIVE$3 = 'active';\n  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\n  var EVENT_CLICK_DATA_API$6 = \"click\".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);\n  /**\n   * Class definition\n   */\n  var Button = /*#__PURE__*/function (_BaseComponent2) {\n    _inherits(Button, _BaseComponent2);\n    var _super3 = _createSuper(Button);\n    function Button() {\n      _classCallCheck(this, Button);\n      return _super3.apply(this, arguments);\n    }\n    _createClass(Button, [{\n      key: \"toggle\",\n      value:\n      // Public\n\n      function toggle() {\n        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n      } // Static\n    }], [{\n      key: \"NAME\",\n      get:\n      // Getters\n      function get() {\n        return NAME$e;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Button.getOrCreateInstance(this);\n          if (config === 'toggle') {\n            data[config]();\n          }\n        });\n      }\n    }]);\n    return Button;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, function (event) {\n    event.preventDefault();\n    var button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n    var data = Button.getOrCreateInstance(button);\n    data.toggle();\n  });\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Button);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dom/selector-engine.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var SelectorEngine = {\n    find: function find(selector) {\n      var _ref7;\n      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n      return (_ref7 = []).concat.apply(_ref7, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));\n    },\n    findOne: function findOne(selector) {\n      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n      return Element.prototype.querySelector.call(element, selector);\n    },\n    children: function children(element, selector) {\n      var _ref8;\n      return (_ref8 = []).concat.apply(_ref8, _toConsumableArray(element.children)).filter(function (child) {\n        return child.matches(selector);\n      });\n    },\n    parents: function parents(element, selector) {\n      var parents = [];\n      var ancestor = element.parentNode.closest(selector);\n      while (ancestor) {\n        parents.push(ancestor);\n        ancestor = ancestor.parentNode.closest(selector);\n      }\n      return parents;\n    },\n    prev: function prev(element, selector) {\n      var previous = element.previousElementSibling;\n      while (previous) {\n        if (previous.matches(selector)) {\n          return [previous];\n        }\n        previous = previous.previousElementSibling;\n      }\n      return [];\n    },\n    // TODO: this is now unused; remove later along with prev()\n    next: function next(element, selector) {\n      var next = element.nextElementSibling;\n      while (next) {\n        if (next.matches(selector)) {\n          return [next];\n        }\n        next = next.nextElementSibling;\n      }\n      return [];\n    },\n    focusableChildren: function focusableChildren(element) {\n      var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(function (selector) {\n        return \"\".concat(selector, \":not([tabindex^=\\\"-\\\"])\");\n      }).join(',');\n      return this.find(focusables, element).filter(function (el) {\n        return !isDisabled(el) && isVisible(el);\n      });\n    }\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/swipe.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$d = 'swipe';\n  var EVENT_KEY$9 = '.bs.swipe';\n  var EVENT_TOUCHSTART = \"touchstart\".concat(EVENT_KEY$9);\n  var EVENT_TOUCHMOVE = \"touchmove\".concat(EVENT_KEY$9);\n  var EVENT_TOUCHEND = \"touchend\".concat(EVENT_KEY$9);\n  var EVENT_POINTERDOWN = \"pointerdown\".concat(EVENT_KEY$9);\n  var EVENT_POINTERUP = \"pointerup\".concat(EVENT_KEY$9);\n  var POINTER_TYPE_TOUCH = 'touch';\n  var POINTER_TYPE_PEN = 'pen';\n  var CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  var SWIPE_THRESHOLD = 40;\n  var Default$c = {\n    endCallback: null,\n    leftCallback: null,\n    rightCallback: null\n  };\n  var DefaultType$c = {\n    endCallback: '(function|null)',\n    leftCallback: '(function|null)',\n    rightCallback: '(function|null)'\n  };\n  /**\n   * Class definition\n   */\n  var Swipe = /*#__PURE__*/function (_Config2) {\n    _inherits(Swipe, _Config2);\n    var _super4 = _createSuper(Swipe);\n    function Swipe(element, config) {\n      var _this3;\n      _classCallCheck(this, Swipe);\n      _this3 = _super4.call(this);\n      _this3._element = element;\n      if (!element || !Swipe.isSupported()) {\n        return _possibleConstructorReturn(_this3);\n      }\n      _this3._config = _this3._getConfig(config);\n      _this3._deltaX = 0;\n      _this3._supportPointerEvents = Boolean(window.PointerEvent);\n      _this3._initEvents();\n      return _this3;\n    } // Getters\n    _createClass(Swipe, [{\n      key: \"dispose\",\n      value:\n      // Public\n\n      function dispose() {\n        EventHandler.off(this._element, EVENT_KEY$9);\n      } // Private\n    }, {\n      key: \"_start\",\n      value: function _start(event) {\n        if (!this._supportPointerEvents) {\n          this._deltaX = event.touches[0].clientX;\n          return;\n        }\n        if (this._eventIsPointerPenTouch(event)) {\n          this._deltaX = event.clientX;\n        }\n      }\n    }, {\n      key: \"_end\",\n      value: function _end(event) {\n        if (this._eventIsPointerPenTouch(event)) {\n          this._deltaX = event.clientX - this._deltaX;\n        }\n        this._handleSwipe();\n        execute(this._config.endCallback);\n      }\n    }, {\n      key: \"_move\",\n      value: function _move(event) {\n        this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;\n      }\n    }, {\n      key: \"_handleSwipe\",\n      value: function _handleSwipe() {\n        var absDeltaX = Math.abs(this._deltaX);\n        if (absDeltaX <= SWIPE_THRESHOLD) {\n          return;\n        }\n        var direction = absDeltaX / this._deltaX;\n        this._deltaX = 0;\n        if (!direction) {\n          return;\n        }\n        execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);\n      }\n    }, {\n      key: \"_initEvents\",\n      value: function _initEvents() {\n        var _this4 = this;\n        if (this._supportPointerEvents) {\n          EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {\n            return _this4._start(event);\n          });\n          EventHandler.on(this._element, EVENT_POINTERUP, function (event) {\n            return _this4._end(event);\n          });\n          this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n        } else {\n          EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {\n            return _this4._start(event);\n          });\n          EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {\n            return _this4._move(event);\n          });\n          EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {\n            return _this4._end(event);\n          });\n        }\n      }\n    }, {\n      key: \"_eventIsPointerPenTouch\",\n      value: function _eventIsPointerPenTouch(event) {\n        return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$c;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$c;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$d;\n      }\n    }, {\n      key: \"isSupported\",\n      value: function isSupported() {\n        return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n      }\n    }]);\n    return Swipe;\n  }(Config);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): carousel.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n  var NAME$c = 'carousel';\n  var DATA_KEY$8 = 'bs.carousel';\n  var EVENT_KEY$8 = \".\".concat(DATA_KEY$8);\n  var DATA_API_KEY$5 = '.data-api';\n  var ARROW_LEFT_KEY$1 = 'ArrowLeft';\n  var ARROW_RIGHT_KEY$1 = 'ArrowRight';\n  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n  var ORDER_NEXT = 'next';\n  var ORDER_PREV = 'prev';\n  var DIRECTION_LEFT = 'left';\n  var DIRECTION_RIGHT = 'right';\n  var EVENT_SLIDE = \"slide\".concat(EVENT_KEY$8);\n  var EVENT_SLID = \"slid\".concat(EVENT_KEY$8);\n  var EVENT_KEYDOWN$1 = \"keydown\".concat(EVENT_KEY$8);\n  var EVENT_MOUSEENTER$1 = \"mouseenter\".concat(EVENT_KEY$8);\n  var EVENT_MOUSELEAVE$1 = \"mouseleave\".concat(EVENT_KEY$8);\n  var EVENT_DRAG_START = \"dragstart\".concat(EVENT_KEY$8);\n  var EVENT_LOAD_DATA_API$3 = \"load\".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);\n  var EVENT_CLICK_DATA_API$5 = \"click\".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);\n  var CLASS_NAME_CAROUSEL = 'carousel';\n  var CLASS_NAME_ACTIVE$2 = 'active';\n  var CLASS_NAME_SLIDE = 'slide';\n  var CLASS_NAME_END = 'carousel-item-end';\n  var CLASS_NAME_START = 'carousel-item-start';\n  var CLASS_NAME_NEXT = 'carousel-item-next';\n  var CLASS_NAME_PREV = 'carousel-item-prev';\n  var SELECTOR_ACTIVE = '.active';\n  var SELECTOR_ITEM = '.carousel-item';\n  var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;\n  var SELECTOR_ITEM_IMG = '.carousel-item img';\n  var SELECTOR_INDICATORS = '.carousel-indicators';\n  var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\n  var SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\n  var KEY_TO_DIRECTION = (_KEY_TO_DIRECTION = {}, _defineProperty(_KEY_TO_DIRECTION, ARROW_LEFT_KEY$1, DIRECTION_RIGHT), _defineProperty(_KEY_TO_DIRECTION, ARROW_RIGHT_KEY$1, DIRECTION_LEFT), _KEY_TO_DIRECTION);\n  var Default$b = {\n    interval: 5000,\n    keyboard: true,\n    pause: 'hover',\n    ride: false,\n    touch: true,\n    wrap: true\n  };\n  var DefaultType$b = {\n    interval: '(number|boolean)',\n    // TODO:v6 remove boolean support\n    keyboard: 'boolean',\n    pause: '(string|boolean)',\n    ride: '(boolean|string)',\n    touch: 'boolean',\n    wrap: 'boolean'\n  };\n  /**\n   * Class definition\n   */\n  var Carousel = /*#__PURE__*/function (_BaseComponent3) {\n    _inherits(Carousel, _BaseComponent3);\n    var _super5 = _createSuper(Carousel);\n    function Carousel(element, config) {\n      var _this5;\n      _classCallCheck(this, Carousel);\n      _this5 = _super5.call(this, element, config);\n      _this5._interval = null;\n      _this5._activeElement = null;\n      _this5._isSliding = false;\n      _this5.touchTimeout = null;\n      _this5._swipeHelper = null;\n      _this5._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, _this5._element);\n      _this5._addEventListeners();\n      if (_this5._config.ride === CLASS_NAME_CAROUSEL) {\n        _this5.cycle();\n      }\n      return _this5;\n    } // Getters\n    _createClass(Carousel, [{\n      key: \"next\",\n      value:\n      // Public\n\n      function next() {\n        this._slide(ORDER_NEXT);\n      }\n    }, {\n      key: \"nextWhenVisible\",\n      value: function nextWhenVisible() {\n        // FIXME TODO use `document.visibilityState`\n        // Don't call next when the page isn't visible\n        // or the carousel or its parent isn't visible\n        if (!document.hidden && isVisible(this._element)) {\n          this.next();\n        }\n      }\n    }, {\n      key: \"prev\",\n      value: function prev() {\n        this._slide(ORDER_PREV);\n      }\n    }, {\n      key: \"pause\",\n      value: function pause() {\n        if (this._isSliding) {\n          triggerTransitionEnd(this._element);\n        }\n        this._clearInterval();\n      }\n    }, {\n      key: \"cycle\",\n      value: function cycle() {\n        var _this6 = this;\n        this._clearInterval();\n        this._updateInterval();\n        this._interval = setInterval(function () {\n          return _this6.nextWhenVisible();\n        }, this._config.interval);\n      }\n    }, {\n      key: \"_maybeEnableCycle\",\n      value: function _maybeEnableCycle() {\n        var _this7 = this;\n        if (!this._config.ride) {\n          return;\n        }\n        if (this._isSliding) {\n          EventHandler.one(this._element, EVENT_SLID, function () {\n            return _this7.cycle();\n          });\n          return;\n        }\n        this.cycle();\n      }\n    }, {\n      key: \"to\",\n      value: function to(index) {\n        var _this8 = this;\n        var items = this._getItems();\n        if (index > items.length - 1 || index < 0) {\n          return;\n        }\n        if (this._isSliding) {\n          EventHandler.one(this._element, EVENT_SLID, function () {\n            return _this8.to(index);\n          });\n          return;\n        }\n        var activeIndex = this._getItemIndex(this._getActive());\n        if (activeIndex === index) {\n          return;\n        }\n        var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n        this._slide(order, items[index]);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (this._swipeHelper) {\n          this._swipeHelper.dispose();\n        }\n        _get(_getPrototypeOf(Carousel.prototype), \"dispose\", this).call(this);\n      } // Private\n    }, {\n      key: \"_configAfterMerge\",\n      value: function _configAfterMerge(config) {\n        config.defaultInterval = config.interval;\n        return config;\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this9 = this;\n        if (this._config.keyboard) {\n          EventHandler.on(this._element, EVENT_KEYDOWN$1, function (event) {\n            return _this9._keydown(event);\n          });\n        }\n        if (this._config.pause === 'hover') {\n          EventHandler.on(this._element, EVENT_MOUSEENTER$1, function () {\n            return _this9.pause();\n          });\n          EventHandler.on(this._element, EVENT_MOUSELEAVE$1, function () {\n            return _this9._maybeEnableCycle();\n          });\n        }\n        if (this._config.touch && Swipe.isSupported()) {\n          this._addTouchEventListeners();\n        }\n      }\n    }, {\n      key: \"_addTouchEventListeners\",\n      value: function _addTouchEventListeners() {\n        var _this10 = this;\n        var _iterator5 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var img = _step5.value;\n            EventHandler.on(img, EVENT_DRAG_START, function (event) {\n              return event.preventDefault();\n            });\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        var endCallBack = function endCallBack() {\n          if (_this10._config.pause !== 'hover') {\n            return;\n          } // If it's a touch-enabled device, mouseenter/leave are fired as\n          // part of the mouse compatibility events on first tap - the carousel\n          // would stop cycling until user tapped out of it;\n          // here, we listen for touchend, explicitly pause the carousel\n          // (as if it's the second time we tap on it, mouseenter compat event\n          // is NOT fired) and after a timeout (to allow for mouse compatibility\n          // events to fire) we explicitly restart cycling\n\n          _this10.pause();\n          if (_this10.touchTimeout) {\n            clearTimeout(_this10.touchTimeout);\n          }\n          _this10.touchTimeout = setTimeout(function () {\n            return _this10._maybeEnableCycle();\n          }, TOUCHEVENT_COMPAT_WAIT + _this10._config.interval);\n        };\n        var swipeConfig = {\n          leftCallback: function leftCallback() {\n            return _this10._slide(_this10._directionToOrder(DIRECTION_LEFT));\n          },\n          rightCallback: function rightCallback() {\n            return _this10._slide(_this10._directionToOrder(DIRECTION_RIGHT));\n          },\n          endCallback: endCallBack\n        };\n        this._swipeHelper = new Swipe(this._element, swipeConfig);\n      }\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(event) {\n        if (/input|textarea/i.test(event.target.tagName)) {\n          return;\n        }\n        var direction = KEY_TO_DIRECTION[event.key];\n        if (direction) {\n          event.preventDefault();\n          this._slide(this._directionToOrder(direction));\n        }\n      }\n    }, {\n      key: \"_getItemIndex\",\n      value: function _getItemIndex(element) {\n        return this._getItems().indexOf(element);\n      }\n    }, {\n      key: \"_setActiveIndicatorElement\",\n      value: function _setActiveIndicatorElement(index) {\n        if (!this._indicatorsElement) {\n          return;\n        }\n        var activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);\n        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n        activeIndicator.removeAttribute('aria-current');\n        var newActiveIndicator = SelectorEngine.findOne(\"[data-bs-slide-to=\\\"\".concat(index, \"\\\"]\"), this._indicatorsElement);\n        if (newActiveIndicator) {\n          newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);\n          newActiveIndicator.setAttribute('aria-current', 'true');\n        }\n      }\n    }, {\n      key: \"_updateInterval\",\n      value: function _updateInterval() {\n        var element = this._activeElement || this._getActive();\n        if (!element) {\n          return;\n        }\n        var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n        this._config.interval = elementInterval || this._config.defaultInterval;\n      }\n    }, {\n      key: \"_slide\",\n      value: function _slide(order) {\n        var _this11 = this;\n        var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (this._isSliding) {\n          return;\n        }\n        var activeElement = this._getActive();\n        var isNext = order === ORDER_NEXT;\n        var nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);\n        if (nextElement === activeElement) {\n          return;\n        }\n        var nextElementIndex = this._getItemIndex(nextElement);\n        var triggerEvent = function triggerEvent(eventName) {\n          return EventHandler.trigger(_this11._element, eventName, {\n            relatedTarget: nextElement,\n            direction: _this11._orderToDirection(order),\n            from: _this11._getItemIndex(activeElement),\n            to: nextElementIndex\n          });\n        };\n        var slideEvent = triggerEvent(EVENT_SLIDE);\n        if (slideEvent.defaultPrevented) {\n          return;\n        }\n        if (!activeElement || !nextElement) {\n          // Some weirdness is happening, so we bail\n          // todo: change tests that use empty divs to avoid this check\n          return;\n        }\n        var isCycling = Boolean(this._interval);\n        this.pause();\n        this._isSliding = true;\n        this._setActiveIndicatorElement(nextElementIndex);\n        this._activeElement = nextElement;\n        var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n        var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n        nextElement.classList.add(orderClassName);\n        reflow(nextElement);\n        activeElement.classList.add(directionalClassName);\n        nextElement.classList.add(directionalClassName);\n        var completeCallBack = function completeCallBack() {\n          nextElement.classList.remove(directionalClassName, orderClassName);\n          nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n          _this11._isSliding = false;\n          triggerEvent(EVENT_SLID);\n        };\n        this._queueCallback(completeCallBack, activeElement, this._isAnimated());\n        if (isCycling) {\n          this.cycle();\n        }\n      }\n    }, {\n      key: \"_isAnimated\",\n      value: function _isAnimated() {\n        return this._element.classList.contains(CLASS_NAME_SLIDE);\n      }\n    }, {\n      key: \"_getActive\",\n      value: function _getActive() {\n        return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n      }\n    }, {\n      key: \"_getItems\",\n      value: function _getItems() {\n        return SelectorEngine.find(SELECTOR_ITEM, this._element);\n      }\n    }, {\n      key: \"_clearInterval\",\n      value: function _clearInterval() {\n        if (this._interval) {\n          clearInterval(this._interval);\n          this._interval = null;\n        }\n      }\n    }, {\n      key: \"_directionToOrder\",\n      value: function _directionToOrder(direction) {\n        if (isRTL()) {\n          return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n        }\n        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n      }\n    }, {\n      key: \"_orderToDirection\",\n      value: function _orderToDirection(order) {\n        if (isRTL()) {\n          return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        }\n        return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$b;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$b;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$c;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Carousel.getOrCreateInstance(this, config);\n          if (typeof config === 'number') {\n            data.to(config);\n            return;\n          }\n          if (typeof config === 'string') {\n            if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n            data[config]();\n          }\n        });\n      }\n    }]);\n    return Carousel;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function (event) {\n    var target = getElementFromSelector(this);\n    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n      return;\n    }\n    event.preventDefault();\n    var carousel = Carousel.getOrCreateInstance(target);\n    var slideIndex = this.getAttribute('data-bs-slide-to');\n    if (slideIndex) {\n      carousel.to(slideIndex);\n      carousel._maybeEnableCycle();\n      return;\n    }\n    if (Manipulator.getDataAttribute(this, 'slide') === 'next') {\n      carousel.next();\n      carousel._maybeEnableCycle();\n      return;\n    }\n    carousel.prev();\n    carousel._maybeEnableCycle();\n  });\n  EventHandler.on(window, EVENT_LOAD_DATA_API$3, function () {\n    var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n    var _iterator6 = _createForOfIteratorHelper(carousels),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var carousel = _step6.value;\n        Carousel.getOrCreateInstance(carousel);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Carousel);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): collapse.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$b = 'collapse';\n  var DATA_KEY$7 = 'bs.collapse';\n  var EVENT_KEY$7 = \".\".concat(DATA_KEY$7);\n  var DATA_API_KEY$4 = '.data-api';\n  var EVENT_SHOW$6 = \"show\".concat(EVENT_KEY$7);\n  var EVENT_SHOWN$6 = \"shown\".concat(EVENT_KEY$7);\n  var EVENT_HIDE$6 = \"hide\".concat(EVENT_KEY$7);\n  var EVENT_HIDDEN$6 = \"hidden\".concat(EVENT_KEY$7);\n  var EVENT_CLICK_DATA_API$4 = \"click\".concat(EVENT_KEY$7).concat(DATA_API_KEY$4);\n  var CLASS_NAME_SHOW$7 = 'show';\n  var CLASS_NAME_COLLAPSE = 'collapse';\n  var CLASS_NAME_COLLAPSING = 'collapsing';\n  var CLASS_NAME_COLLAPSED = 'collapsed';\n  var CLASS_NAME_DEEPER_CHILDREN = \":scope .\".concat(CLASS_NAME_COLLAPSE, \" .\").concat(CLASS_NAME_COLLAPSE);\n  var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\n  var WIDTH = 'width';\n  var HEIGHT = 'height';\n  var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\n  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n  var Default$a = {\n    parent: null,\n    toggle: true\n  };\n  var DefaultType$a = {\n    parent: '(null|element)',\n    toggle: 'boolean'\n  };\n  /**\n   * Class definition\n   */\n  var Collapse = /*#__PURE__*/function (_BaseComponent4) {\n    _inherits(Collapse, _BaseComponent4);\n    var _super6 = _createSuper(Collapse);\n    function Collapse(element, config) {\n      var _this12;\n      _classCallCheck(this, Collapse);\n      _this12 = _super6.call(this, element, config);\n      _this12._isTransitioning = false;\n      _this12._triggerArray = [];\n      var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n      var _iterator7 = _createForOfIteratorHelper(toggleList),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var elem = _step7.value;\n          var selector = getSelectorFromElement(elem);\n          var filterElement = SelectorEngine.find(selector).filter(function (foundElement) {\n            return foundElement === _this12._element;\n          });\n          if (selector !== null && filterElement.length) {\n            _this12._triggerArray.push(elem);\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      _this12._initializeChildren();\n      if (!_this12._config.parent) {\n        _this12._addAriaAndCollapsedClass(_this12._triggerArray, _this12._isShown());\n      }\n      if (_this12._config.toggle) {\n        _this12.toggle();\n      }\n      return _this12;\n    } // Getters\n    _createClass(Collapse, [{\n      key: \"toggle\",\n      value:\n      // Public\n\n      function toggle() {\n        if (this._isShown()) {\n          this.hide();\n        } else {\n          this.show();\n        }\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this13 = this;\n        if (this._isTransitioning || this._isShown()) {\n          return;\n        }\n        var activeChildren = []; // find active children\n\n        if (this._config.parent) {\n          activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(function (element) {\n            return element !== _this13._element;\n          }).map(function (element) {\n            return Collapse.getOrCreateInstance(element, {\n              toggle: false\n            });\n          });\n        }\n        if (activeChildren.length && activeChildren[0]._isTransitioning) {\n          return;\n        }\n        var startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);\n        if (startEvent.defaultPrevented) {\n          return;\n        }\n        var _iterator8 = _createForOfIteratorHelper(activeChildren),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var activeInstance = _step8.value;\n            activeInstance.hide();\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        var dimension = this._getDimension();\n        this._element.classList.remove(CLASS_NAME_COLLAPSE);\n        this._element.classList.add(CLASS_NAME_COLLAPSING);\n        this._element.style[dimension] = 0;\n        this._addAriaAndCollapsedClass(this._triggerArray, true);\n        this._isTransitioning = true;\n        var complete = function complete() {\n          _this13._isTransitioning = false;\n          _this13._element.classList.remove(CLASS_NAME_COLLAPSING);\n          _this13._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n          _this13._element.style[dimension] = '';\n          EventHandler.trigger(_this13._element, EVENT_SHOWN$6);\n        };\n        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n        var scrollSize = \"scroll\".concat(capitalizedDimension);\n        this._queueCallback(complete, this._element, true);\n        this._element.style[dimension] = \"\".concat(this._element[scrollSize], \"px\");\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this14 = this;\n        if (this._isTransitioning || !this._isShown()) {\n          return;\n        }\n        var startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);\n        if (startEvent.defaultPrevented) {\n          return;\n        }\n        var dimension = this._getDimension();\n        this._element.style[dimension] = \"\".concat(this._element.getBoundingClientRect()[dimension], \"px\");\n        reflow(this._element);\n        this._element.classList.add(CLASS_NAME_COLLAPSING);\n        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n        var _iterator9 = _createForOfIteratorHelper(this._triggerArray),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var trigger = _step9.value;\n            var element = getElementFromSelector(trigger);\n            if (element && !this._isShown(element)) {\n              this._addAriaAndCollapsedClass([trigger], false);\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        this._isTransitioning = true;\n        var complete = function complete() {\n          _this14._isTransitioning = false;\n          _this14._element.classList.remove(CLASS_NAME_COLLAPSING);\n          _this14._element.classList.add(CLASS_NAME_COLLAPSE);\n          EventHandler.trigger(_this14._element, EVENT_HIDDEN$6);\n        };\n        this._element.style[dimension] = '';\n        this._queueCallback(complete, this._element, true);\n      }\n    }, {\n      key: \"_isShown\",\n      value: function _isShown() {\n        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;\n        return element.classList.contains(CLASS_NAME_SHOW$7);\n      } // Private\n    }, {\n      key: \"_configAfterMerge\",\n      value: function _configAfterMerge(config) {\n        config.toggle = Boolean(config.toggle); // Coerce string values\n\n        config.parent = getElement(config.parent);\n        return config;\n      }\n    }, {\n      key: \"_getDimension\",\n      value: function _getDimension() {\n        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n      }\n    }, {\n      key: \"_initializeChildren\",\n      value: function _initializeChildren() {\n        if (!this._config.parent) {\n          return;\n        }\n        var children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);\n        var _iterator10 = _createForOfIteratorHelper(children),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var element = _step10.value;\n            var selected = getElementFromSelector(element);\n            if (selected) {\n              this._addAriaAndCollapsedClass([element], this._isShown(selected));\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n    }, {\n      key: \"_getFirstLevelChildren\",\n      value: function _getFirstLevelChildren(selector) {\n        var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent); // remove children if greater depth\n\n        return SelectorEngine.find(selector, this._config.parent).filter(function (element) {\n          return !children.includes(element);\n        });\n      }\n    }, {\n      key: \"_addAriaAndCollapsedClass\",\n      value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {\n        if (!triggerArray.length) {\n          return;\n        }\n        var _iterator11 = _createForOfIteratorHelper(triggerArray),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var element = _step11.value;\n            element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);\n            element.setAttribute('aria-expanded', isOpen);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$a;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$a;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$b;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        var _config = {};\n        if (typeof config === 'string' && /show|hide/.test(config)) {\n          _config.toggle = false;\n        }\n        return this.each(function () {\n          var data = Collapse.getOrCreateInstance(this, _config);\n          if (typeof config === 'string') {\n            if (typeof data[config] === 'undefined') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n            data[config]();\n          }\n        });\n      }\n    }]);\n    return Collapse;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n      event.preventDefault();\n    }\n    var selector = getSelectorFromElement(this);\n    var selectorElements = SelectorEngine.find(selector);\n    var _iterator12 = _createForOfIteratorHelper(selectorElements),\n      _step12;\n    try {\n      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n        var element = _step12.value;\n        Collapse.getOrCreateInstance(element, {\n          toggle: false\n        }).toggle();\n      }\n    } catch (err) {\n      _iterator12.e(err);\n    } finally {\n      _iterator12.f();\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Collapse);\n  var top = 'top';\n  var bottom = 'bottom';\n  var right = 'right';\n  var left = 'left';\n  var auto = 'auto';\n  var basePlacements = [top, bottom, right, left];\n  var start = 'start';\n  var end = 'end';\n  var clippingParents = 'clippingParents';\n  var viewport = 'viewport';\n  var popper = 'popper';\n  var reference = 'reference';\n  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n    return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n  }, []);\n  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n    return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n  }, []); // modifiers that need to read the DOM\n\n  var beforeRead = 'beforeRead';\n  var read = 'read';\n  var afterRead = 'afterRead'; // pure-logic modifiers\n\n  var beforeMain = 'beforeMain';\n  var main = 'main';\n  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\n  var beforeWrite = 'beforeWrite';\n  var write = 'write';\n  var afterWrite = 'afterWrite';\n  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n  function getNodeName(element) {\n    return element ? (element.nodeName || '').toLowerCase() : null;\n  }\n  function getWindow(node) {\n    if (node == null) {\n      return window;\n    }\n    if (node.toString() !== '[object Window]') {\n      var ownerDocument = node.ownerDocument;\n      return ownerDocument ? ownerDocument.defaultView || window : window;\n    }\n    return node;\n  }\n  function isElement(node) {\n    var OwnElement = getWindow(node).Element;\n    return node instanceof OwnElement || node instanceof Element;\n  }\n  function isHTMLElement(node) {\n    var OwnElement = getWindow(node).HTMLElement;\n    return node instanceof OwnElement || node instanceof HTMLElement;\n  }\n  function isShadowRoot(node) {\n    // IE 11 has no ShadowRoot\n    if (typeof ShadowRoot === 'undefined') {\n      return false;\n    }\n    var OwnElement = getWindow(node).ShadowRoot;\n    return node instanceof OwnElement || node instanceof ShadowRoot;\n  }\n\n  // and applies them to the HTMLElements such as popper and arrow\n\n  function applyStyles(_ref) {\n    var state = _ref.state;\n    Object.keys(state.elements).forEach(function (name) {\n      var style = state.styles[name] || {};\n      var attributes = state.attributes[name] || {};\n      var element = state.elements[name]; // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      } // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe[cannot-write]\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (name) {\n        var value = attributes[name];\n        if (value === false) {\n          element.removeAttribute(name);\n        } else {\n          element.setAttribute(name, value === true ? '' : value);\n        }\n      });\n    });\n  }\n  function effect$2(_ref2) {\n    var state = _ref2.state;\n    var initialStyles = {\n      popper: {\n        position: state.options.strategy,\n        left: '0',\n        top: '0',\n        margin: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      },\n      reference: {}\n    };\n    Object.assign(state.elements.popper.style, initialStyles.popper);\n    state.styles = initialStyles;\n    if (state.elements.arrow) {\n      Object.assign(state.elements.arrow.style, initialStyles.arrow);\n    }\n    return function () {\n      Object.keys(state.elements).forEach(function (name) {\n        var element = state.elements[name];\n        var attributes = state.attributes[name] || {};\n        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n        var style = styleProperties.reduce(function (style, property) {\n          style[property] = '';\n          return style;\n        }, {}); // arrow is optional + virtual elements\n\n        if (!isHTMLElement(element) || !getNodeName(element)) {\n          return;\n        }\n        Object.assign(element.style, style);\n        Object.keys(attributes).forEach(function (attribute) {\n          element.removeAttribute(attribute);\n        });\n      });\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var applyStyles$1 = {\n    name: 'applyStyles',\n    enabled: true,\n    phase: 'write',\n    fn: applyStyles,\n    effect: effect$2,\n    requires: ['computeStyles']\n  };\n  function getBasePlacement(placement) {\n    return placement.split('-')[0];\n  }\n  var max = Math.max;\n  var min = Math.min;\n  var round = Math.round;\n  function getUAString() {\n    var uaData = navigator.userAgentData;\n    if (uaData != null && uaData.brands) {\n      return uaData.brands.map(function (item) {\n        return item.brand + \"/\" + item.version;\n      }).join(' ');\n    }\n    return navigator.userAgent;\n  }\n  function isLayoutViewport() {\n    return !/^((?!chrome|android).)*safari/i.test(getUAString());\n  }\n  function getBoundingClientRect(element, includeScale, isFixedStrategy) {\n    if (includeScale === void 0) {\n      includeScale = false;\n    }\n    if (isFixedStrategy === void 0) {\n      isFixedStrategy = false;\n    }\n    var clientRect = element.getBoundingClientRect();\n    var scaleX = 1;\n    var scaleY = 1;\n    if (includeScale && isHTMLElement(element)) {\n      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n    }\n    var _ref = isElement(element) ? getWindow(element) : window,\n      visualViewport = _ref.visualViewport;\n    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n    var width = clientRect.width / scaleX;\n    var height = clientRect.height / scaleY;\n    return {\n      width: width,\n      height: height,\n      top: y,\n      right: x + width,\n      bottom: y + height,\n      left: x,\n      x: x,\n      y: y\n    };\n  }\n\n  // means it doesn't take into account transforms.\n\n  function getLayoutRect(element) {\n    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n    // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n    var width = element.offsetWidth;\n    var height = element.offsetHeight;\n    if (Math.abs(clientRect.width - width) <= 1) {\n      width = clientRect.width;\n    }\n    if (Math.abs(clientRect.height - height) <= 1) {\n      height = clientRect.height;\n    }\n    return {\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      width: width,\n      height: height\n    };\n  }\n  function contains(parent, child) {\n    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n    if (parent.contains(child)) {\n      return true;\n    } // then fallback to custom implementation with Shadow DOM support\n    else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n    return false;\n  }\n  function getComputedStyle$1(element) {\n    return getWindow(element).getComputedStyle(element);\n  }\n  function isTableElement(element) {\n    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n  }\n  function getDocumentElement(element) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return ((isElement(element) ? element.ownerDocument :\n    // $FlowFixMe[prop-missing]\n    element.document) || window.document).documentElement;\n  }\n  function getParentNode(element) {\n    if (getNodeName(element) === 'html') {\n      return element;\n    }\n    return (\n      // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n      // $FlowFixMe[incompatible-return]\n      // $FlowFixMe[prop-missing]\n      element.assignedSlot ||\n      // step into the shadow DOM of the parent of a slotted node\n      element.parentNode || (\n      // DOM Element detected\n      isShadowRoot(element) ? element.host : null) ||\n      // ShadowRoot detected\n      // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n      getDocumentElement(element) // fallback\n    );\n  }\n\n  function getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) ||\n    // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle$1(element).position === 'fixed') {\n      return null;\n    }\n    return element.offsetParent;\n  } // `.offsetParent` reports `null` for fixed elements, while absolute elements\n  // return the containing block\n\n  function getContainingBlock(element) {\n    var isFirefox = /firefox/i.test(getUAString());\n    var isIE = /Trident/i.test(getUAString());\n    if (isIE && isHTMLElement(element)) {\n      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n      var elementCss = getComputedStyle$1(element);\n      if (elementCss.position === 'fixed') {\n        return null;\n      }\n    }\n    var currentNode = getParentNode(element);\n    if (isShadowRoot(currentNode)) {\n      currentNode = currentNode.host;\n    }\n    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n      // create a containing block.\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n        return currentNode;\n      } else {\n        currentNode = currentNode.parentNode;\n      }\n    }\n    return null;\n  } // Gets the closest ancestor positioned element. Handles some edge cases,\n  // such as table ancestors and cross browser bugs.\n\n  function getOffsetParent(element) {\n    var window = getWindow(element);\n    var offsetParent = getTrueOffsetParent(element);\n    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n      offsetParent = getTrueOffsetParent(offsetParent);\n    }\n    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {\n      return window;\n    }\n    return offsetParent || getContainingBlock(element) || window;\n  }\n  function getMainAxisFromPlacement(placement) {\n    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n  }\n  function within(min$1, value, max$1) {\n    return max(min$1, min(value, max$1));\n  }\n  function withinMaxClamp(min, value, max) {\n    var v = within(min, value, max);\n    return v > max ? max : v;\n  }\n  function getFreshSideObject() {\n    return {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n  function mergePaddingObject(paddingObject) {\n    return Object.assign({}, getFreshSideObject(), paddingObject);\n  }\n  function expandToHashMap(value, keys) {\n    return keys.reduce(function (hashMap, key) {\n      hashMap[key] = value;\n      return hashMap;\n    }, {});\n  }\n  var toPaddingObject = function toPaddingObject(padding, state) {\n    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n      placement: state.placement\n    })) : padding;\n    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  };\n  function arrow(_ref) {\n    var _state$modifiersData$;\n    var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n    var arrowElement = state.elements.arrow;\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var basePlacement = getBasePlacement(state.placement);\n    var axis = getMainAxisFromPlacement(basePlacement);\n    var isVertical = [left, right].indexOf(basePlacement) >= 0;\n    var len = isVertical ? 'height' : 'width';\n    if (!arrowElement || !popperOffsets) {\n      return;\n    }\n    var paddingObject = toPaddingObject(options.padding, state);\n    var arrowRect = getLayoutRect(arrowElement);\n    var minProp = axis === 'y' ? top : left;\n    var maxProp = axis === 'y' ? bottom : right;\n    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n    var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n    var arrowOffsetParent = getOffsetParent(arrowElement);\n    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n    // outside of the popper bounds\n\n    var min = paddingObject[minProp];\n    var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n    var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n    var axisProp = axis;\n    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n  }\n  function effect$1(_ref2) {\n    var state = _ref2.state,\n      options = _ref2.options;\n    var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n    if (arrowElement == null) {\n      return;\n    } // CSS selector\n\n    if (typeof arrowElement === 'string') {\n      arrowElement = state.elements.popper.querySelector(arrowElement);\n      if (!arrowElement) {\n        return;\n      }\n    }\n    if (!contains(state.elements.popper, arrowElement)) {\n      return;\n    }\n    state.elements.arrow = arrowElement;\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var arrow$1 = {\n    name: 'arrow',\n    enabled: true,\n    phase: 'main',\n    fn: arrow,\n    effect: effect$1,\n    requires: ['popperOffsets'],\n    requiresIfExists: ['preventOverflow']\n  };\n  function getVariation(placement) {\n    return placement.split('-')[1];\n  }\n  var unsetSides = {\n    top: 'auto',\n    right: 'auto',\n    bottom: 'auto',\n    left: 'auto'\n  }; // Round the offsets to the nearest suitable subpixel based on the DPR.\n  // Zooming can change the DPR, but it seems to report a value that will\n  // cleanly divide the values into the appropriate subpixels.\n\n  function roundOffsetsByDPR(_ref) {\n    var x = _ref.x,\n      y = _ref.y;\n    var win = window;\n    var dpr = win.devicePixelRatio || 1;\n    return {\n      x: round(x * dpr) / dpr || 0,\n      y: round(y * dpr) / dpr || 0\n    };\n  }\n  function mapToStyles(_ref2) {\n    var _Object$assign2;\n    var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n    var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n      x: x,\n      y: y\n    }) : {\n      x: x,\n      y: y\n    };\n    x = _ref3.x;\n    y = _ref3.y;\n    var hasX = offsets.hasOwnProperty('x');\n    var hasY = offsets.hasOwnProperty('y');\n    var sideX = left;\n    var sideY = top;\n    var win = window;\n    if (adaptive) {\n      var offsetParent = getOffsetParent(popper);\n      var heightProp = 'clientHeight';\n      var widthProp = 'clientWidth';\n      if (offsetParent === getWindow(popper)) {\n        offsetParent = getDocumentElement(popper);\n        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {\n          heightProp = 'scrollHeight';\n          widthProp = 'scrollWidth';\n        }\n      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n      offsetParent = offsetParent;\n      if (placement === top || (placement === left || placement === right) && variation === end) {\n        sideY = bottom;\n        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :\n        // $FlowFixMe[prop-missing]\n        offsetParent[heightProp];\n        y -= offsetY - popperRect.height;\n        y *= gpuAcceleration ? 1 : -1;\n      }\n      if (placement === left || (placement === top || placement === bottom) && variation === end) {\n        sideX = right;\n        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :\n        // $FlowFixMe[prop-missing]\n        offsetParent[widthProp];\n        x -= offsetX - popperRect.width;\n        x *= gpuAcceleration ? 1 : -1;\n      }\n    }\n    var commonStyles = Object.assign({\n      position: position\n    }, adaptive && unsetSides);\n    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n      x: x,\n      y: y\n    }) : {\n      x: x,\n      y: y\n    };\n    x = _ref4.x;\n    y = _ref4.y;\n    if (gpuAcceleration) {\n      var _Object$assign;\n      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n    }\n    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n  }\n  function computeStyles(_ref5) {\n    var state = _ref5.state,\n      options = _ref5.options;\n    var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n    var commonStyles = {\n      placement: getBasePlacement(state.placement),\n      variation: getVariation(state.placement),\n      popper: state.elements.popper,\n      popperRect: state.rects.popper,\n      gpuAcceleration: gpuAcceleration,\n      isFixed: state.options.strategy === 'fixed'\n    };\n    if (state.modifiersData.popperOffsets != null) {\n      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n        offsets: state.modifiersData.popperOffsets,\n        position: state.options.strategy,\n        adaptive: adaptive,\n        roundOffsets: roundOffsets\n      })));\n    }\n    if (state.modifiersData.arrow != null) {\n      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n        offsets: state.modifiersData.arrow,\n        position: 'absolute',\n        adaptive: false,\n        roundOffsets: roundOffsets\n      })));\n    }\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n      'data-popper-placement': state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var computeStyles$1 = {\n    name: 'computeStyles',\n    enabled: true,\n    phase: 'beforeWrite',\n    fn: computeStyles,\n    data: {}\n  };\n  var passive = {\n    passive: true\n  };\n  function effect(_ref) {\n    var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n    var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n    var window = getWindow(state.elements.popper);\n    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.addEventListener('scroll', instance.update, passive);\n      });\n    }\n    if (resize) {\n      window.addEventListener('resize', instance.update, passive);\n    }\n    return function () {\n      if (scroll) {\n        scrollParents.forEach(function (scrollParent) {\n          scrollParent.removeEventListener('scroll', instance.update, passive);\n        });\n      }\n      if (resize) {\n        window.removeEventListener('resize', instance.update, passive);\n      }\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var eventListeners = {\n    name: 'eventListeners',\n    enabled: true,\n    phase: 'write',\n    fn: function fn() {},\n    effect: effect,\n    data: {}\n  };\n  var hash$1 = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n  function getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\n      return hash$1[matched];\n    });\n  }\n  var hash = {\n    start: 'end',\n    end: 'start'\n  };\n  function getOppositeVariationPlacement(placement) {\n    return placement.replace(/start|end/g, function (matched) {\n      return hash[matched];\n    });\n  }\n  function getWindowScroll(node) {\n    var win = getWindow(node);\n    var scrollLeft = win.pageXOffset;\n    var scrollTop = win.pageYOffset;\n    return {\n      scrollLeft: scrollLeft,\n      scrollTop: scrollTop\n    };\n  }\n  function getWindowScrollBarX(element) {\n    // If <html> has a CSS width greater than the viewport, then this will be\n    // incorrect for RTL.\n    // Popper 1 is broken in this case and never had a bug report so let's assume\n    // it's not an issue. I don't think anyone ever specifies width on <html>\n    // anyway.\n    // Browsers where the left scrollbar doesn't cause an issue report `0` for\n    // this (e.g. Edge 2019, IE11, Safari)\n    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n  }\n  function getViewportRect(element, strategy) {\n    var win = getWindow(element);\n    var html = getDocumentElement(element);\n    var visualViewport = win.visualViewport;\n    var width = html.clientWidth;\n    var height = html.clientHeight;\n    var x = 0;\n    var y = 0;\n    if (visualViewport) {\n      width = visualViewport.width;\n      height = visualViewport.height;\n      var layoutViewport = isLayoutViewport();\n      if (layoutViewport || !layoutViewport && strategy === 'fixed') {\n        x = visualViewport.offsetLeft;\n        y = visualViewport.offsetTop;\n      }\n    }\n    return {\n      width: width,\n      height: height,\n      x: x + getWindowScrollBarX(element),\n      y: y\n    };\n  }\n\n  // of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\n  function getDocumentRect(element) {\n    var _element$ownerDocumen;\n    var html = getDocumentElement(element);\n    var winScroll = getWindowScroll(element);\n    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n    var y = -winScroll.scrollTop;\n    if (getComputedStyle$1(body || html).direction === 'rtl') {\n      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n    }\n    return {\n      width: width,\n      height: height,\n      x: x,\n      y: y\n    };\n  }\n  function isScrollParent(element) {\n    // Firefox wants us to check `-x` and `-y` variations as well\n    var _getComputedStyle = getComputedStyle$1(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n  }\n  function getScrollParent(node) {\n    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n      // $FlowFixMe[incompatible-return]: assume body is always available\n      return node.ownerDocument.body;\n    }\n    if (isHTMLElement(node) && isScrollParent(node)) {\n      return node;\n    }\n    return getScrollParent(getParentNode(node));\n  }\n\n  /*\n  given a DOM element, return the list of all scroll parents, up the list of ancesors\n  until we get to the top window object. This list is what we attach scroll listeners\n  to, because if any of these parent elements scroll, we'll need to re-calculate the\n  reference element's position.\n  */\n\n  function listScrollParents(element, list) {\n    var _element$ownerDocumen;\n    if (list === void 0) {\n      list = [];\n    }\n    var scrollParent = getScrollParent(element);\n    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n    var win = getWindow(scrollParent);\n    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n    var updatedList = list.concat(target);\n    return isBody ? updatedList :\n    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    updatedList.concat(listScrollParents(getParentNode(target)));\n  }\n  function rectToClientRect(rect) {\n    return Object.assign({}, rect, {\n      left: rect.x,\n      top: rect.y,\n      right: rect.x + rect.width,\n      bottom: rect.y + rect.height\n    });\n  }\n  function getInnerBoundingClientRect(element, strategy) {\n    var rect = getBoundingClientRect(element, false, strategy === 'fixed');\n    rect.top = rect.top + element.clientTop;\n    rect.left = rect.left + element.clientLeft;\n    rect.bottom = rect.top + element.clientHeight;\n    rect.right = rect.left + element.clientWidth;\n    rect.width = element.clientWidth;\n    rect.height = element.clientHeight;\n    rect.x = rect.left;\n    rect.y = rect.top;\n    return rect;\n  }\n  function getClientRectFromMixedType(element, clippingParent, strategy) {\n    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n  } // A \"clipping parent\" is an overflowable container with the characteristic of\n  // clipping (or hiding) overflowing elements with a position different from\n  // `initial`\n\n  function getClippingParents(element) {\n    var clippingParents = listScrollParents(getParentNode(element));\n    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;\n    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n    if (!isElement(clipperElement)) {\n      return [];\n    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n    return clippingParents.filter(function (clippingParent) {\n      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n    });\n  } // Gets the maximum area that the element is visible in due to any number of\n  // clipping parents\n\n  function getClippingRect(element, boundary, rootBoundary, strategy) {\n    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n    var firstClippingParent = clippingParents[0];\n    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n      var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n      accRect.top = max(rect.top, accRect.top);\n      accRect.right = min(rect.right, accRect.right);\n      accRect.bottom = min(rect.bottom, accRect.bottom);\n      accRect.left = max(rect.left, accRect.left);\n      return accRect;\n    }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n    clippingRect.width = clippingRect.right - clippingRect.left;\n    clippingRect.height = clippingRect.bottom - clippingRect.top;\n    clippingRect.x = clippingRect.left;\n    clippingRect.y = clippingRect.top;\n    return clippingRect;\n  }\n  function computeOffsets(_ref) {\n    var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n    var basePlacement = placement ? getBasePlacement(placement) : null;\n    var variation = placement ? getVariation(placement) : null;\n    var commonX = reference.x + reference.width / 2 - element.width / 2;\n    var commonY = reference.y + reference.height / 2 - element.height / 2;\n    var offsets;\n    switch (basePlacement) {\n      case top:\n        offsets = {\n          x: commonX,\n          y: reference.y - element.height\n        };\n        break;\n      case bottom:\n        offsets = {\n          x: commonX,\n          y: reference.y + reference.height\n        };\n        break;\n      case right:\n        offsets = {\n          x: reference.x + reference.width,\n          y: commonY\n        };\n        break;\n      case left:\n        offsets = {\n          x: reference.x - element.width,\n          y: commonY\n        };\n        break;\n      default:\n        offsets = {\n          x: reference.x,\n          y: reference.y\n        };\n    }\n    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n    if (mainAxis != null) {\n      var len = mainAxis === 'y' ? 'height' : 'width';\n      switch (variation) {\n        case start:\n          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n          break;\n        case end:\n          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n          break;\n      }\n    }\n    return offsets;\n  }\n  function detectOverflow(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n    var altContext = elementContext === popper ? reference : popper;\n    var popperRect = state.rects.popper;\n    var element = state.elements[altBoundary ? altContext : elementContext];\n    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n    var referenceClientRect = getBoundingClientRect(state.elements.reference);\n    var popperOffsets = computeOffsets({\n      reference: referenceClientRect,\n      element: popperRect,\n      strategy: 'absolute',\n      placement: placement\n    });\n    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n    // 0 or negative = within the clipping rect\n\n    var overflowOffsets = {\n      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n      right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n    };\n    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n    if (elementContext === popper && offsetData) {\n      var offset = offsetData[placement];\n      Object.keys(overflowOffsets).forEach(function (key) {\n        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n        overflowOffsets[key] += offset[axis] * multiply;\n      });\n    }\n    return overflowOffsets;\n  }\n  function computeAutoPlacement(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n    var variation = getVariation(placement);\n    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n      return getVariation(placement) === variation;\n    }) : basePlacements;\n    var allowedPlacements = placements$1.filter(function (placement) {\n      return allowedAutoPlacements.indexOf(placement) >= 0;\n    });\n    if (allowedPlacements.length === 0) {\n      allowedPlacements = placements$1;\n    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n    var overflows = allowedPlacements.reduce(function (acc, placement) {\n      acc[placement] = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding\n      })[getBasePlacement(placement)];\n      return acc;\n    }, {});\n    return Object.keys(overflows).sort(function (a, b) {\n      return overflows[a] - overflows[b];\n    });\n  }\n  function getExpandedFallbackPlacements(placement) {\n    if (getBasePlacement(placement) === auto) {\n      return [];\n    }\n    var oppositePlacement = getOppositePlacement(placement);\n    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n  }\n  function flip(_ref) {\n    var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n    if (state.modifiersData[name]._skip) {\n      return;\n    }\n    var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n    var preferredPlacement = state.options.placement;\n    var basePlacement = getBasePlacement(preferredPlacement);\n    var isBasePlacement = basePlacement === preferredPlacement;\n    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding,\n        flipVariations: flipVariations,\n        allowedAutoPlacements: allowedAutoPlacements\n      }) : placement);\n    }, []);\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var checksMap = new Map();\n    var makeFallbackChecks = true;\n    var firstFittingPlacement = placements[0];\n    for (var i = 0; i < placements.length; i++) {\n      var placement = placements[i];\n      var _basePlacement = getBasePlacement(placement);\n      var isStartVariation = getVariation(placement) === start;\n      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n      var len = isVertical ? 'width' : 'height';\n      var overflow = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        altBoundary: altBoundary,\n        padding: padding\n      });\n      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n      if (referenceRect[len] > popperRect[len]) {\n        mainVariationSide = getOppositePlacement(mainVariationSide);\n      }\n      var altVariationSide = getOppositePlacement(mainVariationSide);\n      var checks = [];\n      if (checkMainAxis) {\n        checks.push(overflow[_basePlacement] <= 0);\n      }\n      if (checkAltAxis) {\n        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n      }\n      if (checks.every(function (check) {\n        return check;\n      })) {\n        firstFittingPlacement = placement;\n        makeFallbackChecks = false;\n        break;\n      }\n      checksMap.set(placement, checks);\n    }\n    if (makeFallbackChecks) {\n      // `2` may be desired in some cases – research later\n      var numberOfChecks = flipVariations ? 3 : 1;\n      var _loop = function _loop(_i) {\n        var fittingPlacement = placements.find(function (placement) {\n          var checks = checksMap.get(placement);\n          if (checks) {\n            return checks.slice(0, _i).every(function (check) {\n              return check;\n            });\n          }\n        });\n        if (fittingPlacement) {\n          firstFittingPlacement = fittingPlacement;\n          return \"break\";\n        }\n      };\n      for (var _i = numberOfChecks; _i > 0; _i--) {\n        var _ret = _loop(_i);\n        if (_ret === \"break\") break;\n      }\n    }\n    if (state.placement !== firstFittingPlacement) {\n      state.modifiersData[name]._skip = true;\n      state.placement = firstFittingPlacement;\n      state.reset = true;\n    }\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var flip$1 = {\n    name: 'flip',\n    enabled: true,\n    phase: 'main',\n    fn: flip,\n    requiresIfExists: ['offset'],\n    data: {\n      _skip: false\n    }\n  };\n  function getSideOffsets(overflow, rect, preventedOffsets) {\n    if (preventedOffsets === void 0) {\n      preventedOffsets = {\n        x: 0,\n        y: 0\n      };\n    }\n    return {\n      top: overflow.top - rect.height - preventedOffsets.y,\n      right: overflow.right - rect.width + preventedOffsets.x,\n      bottom: overflow.bottom - rect.height + preventedOffsets.y,\n      left: overflow.left - rect.width - preventedOffsets.x\n    };\n  }\n  function isAnySideFullyClipped(overflow) {\n    return [top, right, bottom, left].some(function (side) {\n      return overflow[side] >= 0;\n    });\n  }\n  function hide(_ref) {\n    var state = _ref.state,\n      name = _ref.name;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var preventedOffsets = state.modifiersData.preventOverflow;\n    var referenceOverflow = detectOverflow(state, {\n      elementContext: 'reference'\n    });\n    var popperAltOverflow = detectOverflow(state, {\n      altBoundary: true\n    });\n    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n    state.modifiersData[name] = {\n      referenceClippingOffsets: referenceClippingOffsets,\n      popperEscapeOffsets: popperEscapeOffsets,\n      isReferenceHidden: isReferenceHidden,\n      hasPopperEscaped: hasPopperEscaped\n    };\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n      'data-popper-reference-hidden': isReferenceHidden,\n      'data-popper-escaped': hasPopperEscaped\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var hide$1 = {\n    name: 'hide',\n    enabled: true,\n    phase: 'main',\n    requiresIfExists: ['preventOverflow'],\n    fn: hide\n  };\n  function distanceAndSkiddingToXY(placement, rects, offset) {\n    var basePlacement = getBasePlacement(placement);\n    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n        placement: placement\n      })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n    skidding = skidding || 0;\n    distance = (distance || 0) * invertDistance;\n    return [left, right].indexOf(basePlacement) >= 0 ? {\n      x: distance,\n      y: skidding\n    } : {\n      x: skidding,\n      y: distance\n    };\n  }\n  function offset(_ref2) {\n    var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n    var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n    var data = placements.reduce(function (acc, placement) {\n      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n      return acc;\n    }, {});\n    var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n    if (state.modifiersData.popperOffsets != null) {\n      state.modifiersData.popperOffsets.x += x;\n      state.modifiersData.popperOffsets.y += y;\n    }\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var offset$1 = {\n    name: 'offset',\n    enabled: true,\n    phase: 'main',\n    requires: ['popperOffsets'],\n    fn: offset\n  };\n  function popperOffsets(_ref) {\n    var state = _ref.state,\n      name = _ref.name;\n    // Offsets are the actual position the popper needs to have to be\n    // properly positioned near its reference element\n    // This is the most basic placement, and will be adjusted by\n    // the modifiers in the next step\n    state.modifiersData[name] = computeOffsets({\n      reference: state.rects.reference,\n      element: state.rects.popper,\n      strategy: 'absolute',\n      placement: state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var popperOffsets$1 = {\n    name: 'popperOffsets',\n    enabled: true,\n    phase: 'read',\n    fn: popperOffsets,\n    data: {}\n  };\n  function getAltAxis(axis) {\n    return axis === 'x' ? 'y' : 'x';\n  }\n  function preventOverflow(_ref) {\n    var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n    var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n    var overflow = detectOverflow(state, {\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      altBoundary: altBoundary\n    });\n    var basePlacement = getBasePlacement(state.placement);\n    var variation = getVariation(state.placement);\n    var isBasePlacement = !variation;\n    var mainAxis = getMainAxisFromPlacement(basePlacement);\n    var altAxis = getAltAxis(mainAxis);\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n      placement: state.placement\n    })) : tetherOffset;\n    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n      mainAxis: tetherOffsetValue,\n      altAxis: tetherOffsetValue\n    } : Object.assign({\n      mainAxis: 0,\n      altAxis: 0\n    }, tetherOffsetValue);\n    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n    var data = {\n      x: 0,\n      y: 0\n    };\n    if (!popperOffsets) {\n      return;\n    }\n    if (checkMainAxis) {\n      var _offsetModifierState$;\n      var mainSide = mainAxis === 'y' ? top : left;\n      var altSide = mainAxis === 'y' ? bottom : right;\n      var len = mainAxis === 'y' ? 'height' : 'width';\n      var offset = popperOffsets[mainAxis];\n      var min$1 = offset + overflow[mainSide];\n      var max$1 = offset - overflow[altSide];\n      var additive = tether ? -popperRect[len] / 2 : 0;\n      var minLen = variation === start ? referenceRect[len] : popperRect[len];\n      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n      // outside the reference bounds\n\n      var arrowElement = state.elements.arrow;\n      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n        width: 0,\n        height: 0\n      };\n      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n      var arrowPaddingMin = arrowPaddingObject[mainSide];\n      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n      // to include its full size in the calculation. If the reference is small\n      // and near the edge of a boundary, the popper can overflow even if the\n      // reference is not overflowing as well (e.g. virtual elements with no\n      // width or height)\n\n      var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n      var tetherMax = offset + maxOffset - offsetModifierValue;\n      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n      popperOffsets[mainAxis] = preventedOffset;\n      data[mainAxis] = preventedOffset - offset;\n    }\n    if (checkAltAxis) {\n      var _offsetModifierState$2;\n      var _mainSide = mainAxis === 'x' ? top : left;\n      var _altSide = mainAxis === 'x' ? bottom : right;\n      var _offset = popperOffsets[altAxis];\n      var _len = altAxis === 'y' ? 'height' : 'width';\n      var _min = _offset + overflow[_mainSide];\n      var _max = _offset - overflow[_altSide];\n      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n      popperOffsets[altAxis] = _preventedOffset;\n      data[altAxis] = _preventedOffset - _offset;\n    }\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n  var preventOverflow$1 = {\n    name: 'preventOverflow',\n    enabled: true,\n    phase: 'main',\n    fn: preventOverflow,\n    requiresIfExists: ['offset']\n  };\n  function getHTMLElementScroll(element) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  function getNodeScroll(node) {\n    if (node === getWindow(node) || !isHTMLElement(node)) {\n      return getWindowScroll(node);\n    } else {\n      return getHTMLElementScroll(node);\n    }\n  }\n  function isElementScaled(element) {\n    var rect = element.getBoundingClientRect();\n    var scaleX = round(rect.width) / element.offsetWidth || 1;\n    var scaleY = round(rect.height) / element.offsetHeight || 1;\n    return scaleX !== 1 || scaleY !== 1;\n  } // Returns the composite rect of an element relative to its offsetParent.\n  // Composite means it takes into account transforms as well as layout.\n\n  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n    if (isFixed === void 0) {\n      isFixed = false;\n    }\n    var isOffsetParentAnElement = isHTMLElement(offsetParent);\n    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n    var documentElement = getDocumentElement(offsetParent);\n    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n    var scroll = {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n    var offsets = {\n      x: 0,\n      y: 0\n    };\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n      if (getNodeName(offsetParent) !== 'body' ||\n      // https://github.com/popperjs/popper-core/issues/1078\n      isScrollParent(documentElement)) {\n        scroll = getNodeScroll(offsetParent);\n      }\n      if (isHTMLElement(offsetParent)) {\n        offsets = getBoundingClientRect(offsetParent, true);\n        offsets.x += offsetParent.clientLeft;\n        offsets.y += offsetParent.clientTop;\n      } else if (documentElement) {\n        offsets.x = getWindowScrollBarX(documentElement);\n      }\n    }\n    return {\n      x: rect.left + scroll.scrollLeft - offsets.x,\n      y: rect.top + scroll.scrollTop - offsets.y,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n  function order(modifiers) {\n    var map = new Map();\n    var visited = new Set();\n    var result = [];\n    modifiers.forEach(function (modifier) {\n      map.set(modifier.name, modifier);\n    }); // On visiting object, check for its dependencies and visit them recursively\n\n    function sort(modifier) {\n      visited.add(modifier.name);\n      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n      requires.forEach(function (dep) {\n        if (!visited.has(dep)) {\n          var depModifier = map.get(dep);\n          if (depModifier) {\n            sort(depModifier);\n          }\n        }\n      });\n      result.push(modifier);\n    }\n    modifiers.forEach(function (modifier) {\n      if (!visited.has(modifier.name)) {\n        // check for visited object\n        sort(modifier);\n      }\n    });\n    return result;\n  }\n  function orderModifiers(modifiers) {\n    // order based on dependencies\n    var orderedModifiers = order(modifiers); // order based on phase\n\n    return modifierPhases.reduce(function (acc, phase) {\n      return acc.concat(orderedModifiers.filter(function (modifier) {\n        return modifier.phase === phase;\n      }));\n    }, []);\n  }\n  function debounce(fn) {\n    var pending;\n    return function () {\n      if (!pending) {\n        pending = new Promise(function (resolve) {\n          Promise.resolve().then(function () {\n            pending = undefined;\n            resolve(fn());\n          });\n        });\n      }\n      return pending;\n    };\n  }\n  function mergeByName(modifiers) {\n    var merged = modifiers.reduce(function (merged, current) {\n      var existing = merged[current.name];\n      merged[current.name] = existing ? Object.assign({}, existing, current, {\n        options: Object.assign({}, existing.options, current.options),\n        data: Object.assign({}, existing.data, current.data)\n      }) : current;\n      return merged;\n    }, {}); // IE11 does not support Object.values\n\n    return Object.keys(merged).map(function (key) {\n      return merged[key];\n    });\n  }\n  var DEFAULT_OPTIONS = {\n    placement: 'bottom',\n    modifiers: [],\n    strategy: 'absolute'\n  };\n  function areValidElements() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return !args.some(function (element) {\n      return !(element && typeof element.getBoundingClientRect === 'function');\n    });\n  }\n  function popperGenerator(generatorOptions) {\n    if (generatorOptions === void 0) {\n      generatorOptions = {};\n    }\n    var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n    return function createPopper(reference, popper, options) {\n      if (options === void 0) {\n        options = defaultOptions;\n      }\n      var state = {\n        placement: 'bottom',\n        orderedModifiers: [],\n        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n        modifiersData: {},\n        elements: {\n          reference: reference,\n          popper: popper\n        },\n        attributes: {},\n        styles: {}\n      };\n      var effectCleanupFns = [];\n      var isDestroyed = false;\n      var instance = {\n        state: state,\n        setOptions: function setOptions(setOptionsAction) {\n          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n          cleanupModifierEffects();\n          state.options = Object.assign({}, defaultOptions, state.options, options);\n          state.scrollParents = {\n            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n            popper: listScrollParents(popper)\n          }; // Orders the modifiers based on their dependencies and `phase`\n          // properties\n\n          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n          state.orderedModifiers = orderedModifiers.filter(function (m) {\n            return m.enabled;\n          }); // Validate the provided modifiers so that the consumer will get warned\n\n          runModifierEffects();\n          return instance.update();\n        },\n        // Sync update – it will always be executed, even if not necessary. This\n        // is useful for low frequency updates where sync behavior simplifies the\n        // logic.\n        // For high frequency updates (e.g. `resize` and `scroll` events), always\n        // prefer the async Popper#update method\n        forceUpdate: function forceUpdate() {\n          if (isDestroyed) {\n            return;\n          }\n          var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n          // anymore\n\n          if (!areValidElements(reference, popper)) {\n            return;\n          } // Store the reference and popper rects to be read by modifiers\n\n          state.rects = {\n            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n            popper: getLayoutRect(popper)\n          }; // Modifiers have the ability to reset the current update cycle. The\n          // most common use case for this is the `flip` modifier changing the\n          // placement, which then needs to re-run all the modifiers, because the\n          // logic was previously ran for the previous placement and is therefore\n          // stale/incorrect\n\n          state.reset = false;\n          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n          // is filled with the initial data specified by the modifier. This means\n          // it doesn't persist and is fresh on each update.\n          // To ensure persistent data, use `${name}#persistent`\n\n          state.orderedModifiers.forEach(function (modifier) {\n            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n          });\n          for (var index = 0; index < state.orderedModifiers.length; index++) {\n            if (state.reset === true) {\n              state.reset = false;\n              index = -1;\n              continue;\n            }\n            var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n            if (typeof fn === 'function') {\n              state = fn({\n                state: state,\n                options: _options,\n                name: name,\n                instance: instance\n              }) || state;\n            }\n          }\n        },\n        // Async and optimistically optimized update – it will not be executed if\n        // not necessary (debounced to run at most once-per-tick)\n        update: debounce(function () {\n          return new Promise(function (resolve) {\n            instance.forceUpdate();\n            resolve(state);\n          });\n        }),\n        destroy: function destroy() {\n          cleanupModifierEffects();\n          isDestroyed = true;\n        }\n      };\n      if (!areValidElements(reference, popper)) {\n        return instance;\n      }\n      instance.setOptions(options).then(function (state) {\n        if (!isDestroyed && options.onFirstUpdate) {\n          options.onFirstUpdate(state);\n        }\n      }); // Modifiers have the ability to execute arbitrary code before the first\n      // update cycle runs. They will be executed in the same order as the update\n      // cycle. This is useful when a modifier adds some persistent data that\n      // other modifiers need to use, but the modifier is run after the dependent\n      // one.\n\n      function runModifierEffects() {\n        state.orderedModifiers.forEach(function (_ref3) {\n          var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n          if (typeof effect === 'function') {\n            var cleanupFn = effect({\n              state: state,\n              name: name,\n              instance: instance,\n              options: options\n            });\n            var noopFn = function noopFn() {};\n            effectCleanupFns.push(cleanupFn || noopFn);\n          }\n        });\n      }\n      function cleanupModifierEffects() {\n        effectCleanupFns.forEach(function (fn) {\n          return fn();\n        });\n        effectCleanupFns = [];\n      }\n      return instance;\n    };\n  }\n  var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\n  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];\n  var createPopper$1 = /*#__PURE__*/popperGenerator({\n    defaultModifiers: defaultModifiers$1\n  }); // eslint-disable-next-line import/no-unused-modules\n\n  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];\n  var createPopper = /*#__PURE__*/popperGenerator({\n    defaultModifiers: defaultModifiers\n  }); // eslint-disable-next-line import/no-unused-modules\n\n  var Popper = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    popperGenerator: popperGenerator,\n    detectOverflow: detectOverflow,\n    createPopperBase: createPopper$2,\n    createPopper: createPopper,\n    createPopperLite: createPopper$1,\n    top: top,\n    bottom: bottom,\n    right: right,\n    left: left,\n    auto: auto,\n    basePlacements: basePlacements,\n    start: start,\n    end: end,\n    clippingParents: clippingParents,\n    viewport: viewport,\n    popper: popper,\n    reference: reference,\n    variationPlacements: variationPlacements,\n    placements: placements,\n    beforeRead: beforeRead,\n    read: read,\n    afterRead: afterRead,\n    beforeMain: beforeMain,\n    main: main,\n    afterMain: afterMain,\n    beforeWrite: beforeWrite,\n    write: write,\n    afterWrite: afterWrite,\n    modifierPhases: modifierPhases,\n    applyStyles: applyStyles$1,\n    arrow: arrow$1,\n    computeStyles: computeStyles$1,\n    eventListeners: eventListeners,\n    flip: flip$1,\n    hide: hide$1,\n    offset: offset$1,\n    popperOffsets: popperOffsets$1,\n    preventOverflow: preventOverflow$1\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  }));\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): dropdown.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$a = 'dropdown';\n  var DATA_KEY$6 = 'bs.dropdown';\n  var EVENT_KEY$6 = \".\".concat(DATA_KEY$6);\n  var DATA_API_KEY$3 = '.data-api';\n  var ESCAPE_KEY$2 = 'Escape';\n  var TAB_KEY$1 = 'Tab';\n  var ARROW_UP_KEY$1 = 'ArrowUp';\n  var ARROW_DOWN_KEY$1 = 'ArrowDown';\n  var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n  var EVENT_HIDE$5 = \"hide\".concat(EVENT_KEY$6);\n  var EVENT_HIDDEN$5 = \"hidden\".concat(EVENT_KEY$6);\n  var EVENT_SHOW$5 = \"show\".concat(EVENT_KEY$6);\n  var EVENT_SHOWN$5 = \"shown\".concat(EVENT_KEY$6);\n  var EVENT_CLICK_DATA_API$3 = \"click\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n  var EVENT_KEYDOWN_DATA_API = \"keydown\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n  var EVENT_KEYUP_DATA_API = \"keyup\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n  var CLASS_NAME_SHOW$6 = 'show';\n  var CLASS_NAME_DROPUP = 'dropup';\n  var CLASS_NAME_DROPEND = 'dropend';\n  var CLASS_NAME_DROPSTART = 'dropstart';\n  var CLASS_NAME_DROPUP_CENTER = 'dropup-center';\n  var CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';\n  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\n  var SELECTOR_DATA_TOGGLE_SHOWN = \"\".concat(SELECTOR_DATA_TOGGLE$3, \".\").concat(CLASS_NAME_SHOW$6);\n  var SELECTOR_MENU = '.dropdown-menu';\n  var SELECTOR_NAVBAR = '.navbar';\n  var SELECTOR_NAVBAR_NAV = '.navbar-nav';\n  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n  var PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';\n  var PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';\n  var PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';\n  var PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';\n  var PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';\n  var PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';\n  var PLACEMENT_TOPCENTER = 'top';\n  var PLACEMENT_BOTTOMCENTER = 'bottom';\n  var Default$9 = {\n    autoClose: true,\n    boundary: 'clippingParents',\n    display: 'dynamic',\n    offset: [0, 2],\n    popperConfig: null,\n    reference: 'toggle'\n  };\n  var DefaultType$9 = {\n    autoClose: '(boolean|string)',\n    boundary: '(string|element)',\n    display: 'string',\n    offset: '(array|string|function)',\n    popperConfig: '(null|object|function)',\n    reference: '(string|element|object)'\n  };\n  /**\n   * Class definition\n   */\n  var Dropdown = /*#__PURE__*/function (_BaseComponent5) {\n    _inherits(Dropdown, _BaseComponent5);\n    var _super7 = _createSuper(Dropdown);\n    function Dropdown(element, config) {\n      var _this15;\n      _classCallCheck(this, Dropdown);\n      _this15 = _super7.call(this, element, config);\n      _this15._popper = null;\n      _this15._parent = _this15._element.parentNode; // dropdown wrapper\n      // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/\n\n      _this15._menu = SelectorEngine.next(_this15._element, SELECTOR_MENU)[0] || SelectorEngine.prev(_this15._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, _this15._parent);\n      _this15._inNavbar = _this15._detectNavbar();\n      return _this15;\n    } // Getters\n    _createClass(Dropdown, [{\n      key: \"toggle\",\n      value:\n      // Public\n\n      function toggle() {\n        return this._isShown() ? this.hide() : this.show();\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        if (isDisabled(this._element) || this._isShown()) {\n          return;\n        }\n        var relatedTarget = {\n          relatedTarget: this._element\n        };\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n        this._createPopper(); // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n        if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n          var _ref9;\n          var _iterator13 = _createForOfIteratorHelper((_ref9 = []).concat.apply(_ref9, _toConsumableArray(document.body.children))),\n            _step13;\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var element = _step13.value;\n              EventHandler.on(element, 'mouseover', noop);\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n        }\n        this._element.focus();\n        this._element.setAttribute('aria-expanded', true);\n        this._menu.classList.add(CLASS_NAME_SHOW$6);\n        this._element.classList.add(CLASS_NAME_SHOW$6);\n        EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        if (isDisabled(this._element) || !this._isShown()) {\n          return;\n        }\n        var relatedTarget = {\n          relatedTarget: this._element\n        };\n        this._completeHide(relatedTarget);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (this._popper) {\n          this._popper.destroy();\n        }\n        _get(_getPrototypeOf(Dropdown.prototype), \"dispose\", this).call(this);\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this._inNavbar = this._detectNavbar();\n        if (this._popper) {\n          this._popper.update();\n        }\n      } // Private\n    }, {\n      key: \"_completeHide\",\n      value: function _completeHide(relatedTarget) {\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);\n        if (hideEvent.defaultPrevented) {\n          return;\n        } // If this is a touch-enabled device we remove the extra\n        // empty mouseover listeners we added for iOS support\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref10;\n          var _iterator14 = _createForOfIteratorHelper((_ref10 = []).concat.apply(_ref10, _toConsumableArray(document.body.children))),\n            _step14;\n          try {\n            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n              var element = _step14.value;\n              EventHandler.off(element, 'mouseover', noop);\n            }\n          } catch (err) {\n            _iterator14.e(err);\n          } finally {\n            _iterator14.f();\n          }\n        }\n        if (this._popper) {\n          this._popper.destroy();\n        }\n        this._menu.classList.remove(CLASS_NAME_SHOW$6);\n        this._element.classList.remove(CLASS_NAME_SHOW$6);\n        this._element.setAttribute('aria-expanded', 'false');\n        Manipulator.removeDataAttribute(this._menu, 'popper');\n        EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _get(_getPrototypeOf(Dropdown.prototype), \"_getConfig\", this).call(this, config);\n        if (_typeof(config.reference) === 'object' && !isElement$1(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n          // Popper virtual elements require a getBoundingClientRect method\n          throw new TypeError(\"\".concat(NAME$a.toUpperCase(), \": Option \\\"reference\\\" provided type \\\"object\\\" without a required \\\"getBoundingClientRect\\\" method.\"));\n        }\n        return config;\n      }\n    }, {\n      key: \"_createPopper\",\n      value: function _createPopper() {\n        if (typeof Popper === 'undefined') {\n          throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n        }\n        var referenceElement = this._element;\n        if (this._config.reference === 'parent') {\n          referenceElement = this._parent;\n        } else if (isElement$1(this._config.reference)) {\n          referenceElement = getElement(this._config.reference);\n        } else if (_typeof(this._config.reference) === 'object') {\n          referenceElement = this._config.reference;\n        }\n        var popperConfig = this._getPopperConfig();\n        this._popper = createPopper(referenceElement, this._menu, popperConfig);\n      }\n    }, {\n      key: \"_isShown\",\n      value: function _isShown() {\n        return this._menu.classList.contains(CLASS_NAME_SHOW$6);\n      }\n    }, {\n      key: \"_getPlacement\",\n      value: function _getPlacement() {\n        var parentDropdown = this._parent;\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n          return PLACEMENT_RIGHT;\n        }\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n          return PLACEMENT_LEFT;\n        }\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n          return PLACEMENT_TOPCENTER;\n        }\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n          return PLACEMENT_BOTTOMCENTER;\n        } // We need to trim the value because custom properties can also include spaces\n\n        var isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n          return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n        }\n        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n      }\n    }, {\n      key: \"_detectNavbar\",\n      value: function _detectNavbar() {\n        return this._element.closest(SELECTOR_NAVBAR) !== null;\n      }\n    }, {\n      key: \"_getOffset\",\n      value: function _getOffset() {\n        var _this16 = this;\n        var offset = this._config.offset;\n        if (typeof offset === 'string') {\n          return offset.split(',').map(function (value) {\n            return Number.parseInt(value, 10);\n          });\n        }\n        if (typeof offset === 'function') {\n          return function (popperData) {\n            return offset(popperData, _this16._element);\n          };\n        }\n        return offset;\n      }\n    }, {\n      key: \"_getPopperConfig\",\n      value: function _getPopperConfig() {\n        var defaultBsPopperConfig = {\n          placement: this._getPlacement(),\n          modifiers: [{\n            name: 'preventOverflow',\n            options: {\n              boundary: this._config.boundary\n            }\n          }, {\n            name: 'offset',\n            options: {\n              offset: this._getOffset()\n            }\n          }]\n        }; // Disable Popper if we have a static display or Dropdown is in Navbar\n\n        if (this._inNavbar || this._config.display === 'static') {\n          Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // todo:v6 remove\n\n          defaultBsPopperConfig.modifiers = [{\n            name: 'applyStyles',\n            enabled: false\n          }];\n        }\n        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);\n      }\n    }, {\n      key: \"_selectMenuItem\",\n      value: function _selectMenuItem(_ref11) {\n        var key = _ref11.key,\n          target = _ref11.target;\n        var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(function (element) {\n          return isVisible(element);\n        });\n        if (!items.length) {\n          return;\n        } // if target isn't included in items (e.g. when expanding the dropdown)\n        // allow cycling to get the last item in case key equals ARROW_UP_KEY\n\n        getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$9;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$9;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$a;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Dropdown.getOrCreateInstance(this, config);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config]();\n        });\n      }\n    }, {\n      key: \"clearMenus\",\n      value: function clearMenus(event) {\n        if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) {\n          return;\n        }\n        var openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);\n        var _iterator15 = _createForOfIteratorHelper(openToggles),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var toggle = _step15.value;\n            var context = Dropdown.getInstance(toggle);\n            if (!context || context._config.autoClose === false) {\n              continue;\n            }\n            var composedPath = event.composedPath();\n            var isMenuTarget = composedPath.includes(context._menu);\n            if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n              continue;\n            } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n\n            if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n              continue;\n            }\n            var relatedTarget = {\n              relatedTarget: context._element\n            };\n            if (event.type === 'click') {\n              relatedTarget.clickEvent = event;\n            }\n            context._completeHide(relatedTarget);\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      }\n    }, {\n      key: \"dataApiKeydownHandler\",\n      value: function dataApiKeydownHandler(event) {\n        // If not an UP | DOWN | ESCAPE key => not a dropdown command\n        // If input/textarea && if key is other than ESCAPE => not a dropdown command\n        var isInput = /input|textarea/i.test(event.target.tagName);\n        var isEscapeEvent = event.key === ESCAPE_KEY$2;\n        var isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);\n        if (!isUpOrDownEvent && !isEscapeEvent) {\n          return;\n        }\n        if (isInput && !isEscapeEvent) {\n          return;\n        }\n        event.preventDefault(); // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.2/forms/input-group/\n\n        var getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);\n        var instance = Dropdown.getOrCreateInstance(getToggleButton);\n        if (isUpOrDownEvent) {\n          event.stopPropagation();\n          instance.show();\n          instance._selectMenuItem(event);\n          return;\n        }\n        if (instance._isShown()) {\n          // else is escape and we check if it is shown\n          event.stopPropagation();\n          instance.hide();\n          getToggleButton.focus();\n        }\n      }\n    }]);\n    return Dropdown;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n    event.preventDefault();\n    Dropdown.getOrCreateInstance(this).toggle();\n  });\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Dropdown);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/scrollBar.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  var SELECTOR_STICKY_CONTENT = '.sticky-top';\n  var PROPERTY_PADDING = 'padding-right';\n  var PROPERTY_MARGIN = 'margin-right';\n  /**\n   * Class definition\n   */\n  var ScrollBarHelper = /*#__PURE__*/function () {\n    function ScrollBarHelper() {\n      _classCallCheck(this, ScrollBarHelper);\n      this._element = document.body;\n    } // Public\n    _createClass(ScrollBarHelper, [{\n      key: \"getWidth\",\n      value: function getWidth() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n        var documentWidth = document.documentElement.clientWidth;\n        return Math.abs(window.innerWidth - documentWidth);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var width = this.getWidth();\n        this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n        this._setElementAttributes(this._element, PROPERTY_PADDING, function (calculatedValue) {\n          return calculatedValue + width;\n        }); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n        this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, function (calculatedValue) {\n          return calculatedValue + width;\n        });\n        this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, function (calculatedValue) {\n          return calculatedValue - width;\n        });\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._resetElementAttributes(this._element, 'overflow');\n        this._resetElementAttributes(this._element, PROPERTY_PADDING);\n        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);\n        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);\n      }\n    }, {\n      key: \"isOverflowing\",\n      value: function isOverflowing() {\n        return this.getWidth() > 0;\n      } // Private\n    }, {\n      key: \"_disableOverFlow\",\n      value: function _disableOverFlow() {\n        this._saveInitialAttribute(this._element, 'overflow');\n        this._element.style.overflow = 'hidden';\n      }\n    }, {\n      key: \"_setElementAttributes\",\n      value: function _setElementAttributes(selector, styleProperty, callback) {\n        var _this17 = this;\n        var scrollbarWidth = this.getWidth();\n        var manipulationCallBack = function manipulationCallBack(element) {\n          if (element !== _this17._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n            return;\n          }\n          _this17._saveInitialAttribute(element, styleProperty);\n          var calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);\n          element.style.setProperty(styleProperty, \"\".concat(callback(Number.parseFloat(calculatedValue)), \"px\"));\n        };\n        this._applyManipulationCallback(selector, manipulationCallBack);\n      }\n    }, {\n      key: \"_saveInitialAttribute\",\n      value: function _saveInitialAttribute(element, styleProperty) {\n        var actualValue = element.style.getPropertyValue(styleProperty);\n        if (actualValue) {\n          Manipulator.setDataAttribute(element, styleProperty, actualValue);\n        }\n      }\n    }, {\n      key: \"_resetElementAttributes\",\n      value: function _resetElementAttributes(selector, styleProperty) {\n        var manipulationCallBack = function manipulationCallBack(element) {\n          var value = Manipulator.getDataAttribute(element, styleProperty); // We only want to remove the property if the value is `null`; the value can also be zero\n\n          if (value === null) {\n            element.style.removeProperty(styleProperty);\n            return;\n          }\n          Manipulator.removeDataAttribute(element, styleProperty);\n          element.style.setProperty(styleProperty, value);\n        };\n        this._applyManipulationCallback(selector, manipulationCallBack);\n      }\n    }, {\n      key: \"_applyManipulationCallback\",\n      value: function _applyManipulationCallback(selector, callBack) {\n        if (isElement$1(selector)) {\n          callBack(selector);\n          return;\n        }\n        var _iterator16 = _createForOfIteratorHelper(SelectorEngine.find(selector, this._element)),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var sel = _step16.value;\n            callBack(sel);\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      }\n    }]);\n    return ScrollBarHelper;\n  }();\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/backdrop.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n  var NAME$9 = 'backdrop';\n  var CLASS_NAME_FADE$4 = 'fade';\n  var CLASS_NAME_SHOW$5 = 'show';\n  var EVENT_MOUSEDOWN = \"mousedown.bs.\".concat(NAME$9);\n  var Default$8 = {\n    className: 'modal-backdrop',\n    clickCallback: null,\n    isAnimated: false,\n    isVisible: true,\n    // if false, we use the backdrop helper without adding any element to the dom\n    rootElement: 'body' // give the choice to place backdrop under different elements\n  };\n\n  var DefaultType$8 = {\n    className: 'string',\n    clickCallback: '(function|null)',\n    isAnimated: 'boolean',\n    isVisible: 'boolean',\n    rootElement: '(element|string)'\n  };\n  /**\n   * Class definition\n   */\n  var Backdrop = /*#__PURE__*/function (_Config3) {\n    _inherits(Backdrop, _Config3);\n    var _super8 = _createSuper(Backdrop);\n    function Backdrop(config) {\n      var _this18;\n      _classCallCheck(this, Backdrop);\n      _this18 = _super8.call(this);\n      _this18._config = _this18._getConfig(config);\n      _this18._isAppended = false;\n      _this18._element = null;\n      return _this18;\n    } // Getters\n    _createClass(Backdrop, [{\n      key: \"show\",\n      value:\n      // Public\n\n      function show(callback) {\n        if (!this._config.isVisible) {\n          execute(callback);\n          return;\n        }\n        this._append();\n        var element = this._getElement();\n        if (this._config.isAnimated) {\n          reflow(element);\n        }\n        element.classList.add(CLASS_NAME_SHOW$5);\n        this._emulateAnimation(function () {\n          execute(callback);\n        });\n      }\n    }, {\n      key: \"hide\",\n      value: function hide(callback) {\n        var _this19 = this;\n        if (!this._config.isVisible) {\n          execute(callback);\n          return;\n        }\n        this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n        this._emulateAnimation(function () {\n          _this19.dispose();\n          execute(callback);\n        });\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (!this._isAppended) {\n          return;\n        }\n        EventHandler.off(this._element, EVENT_MOUSEDOWN);\n        this._element.remove();\n        this._isAppended = false;\n      } // Private\n    }, {\n      key: \"_getElement\",\n      value: function _getElement() {\n        if (!this._element) {\n          var backdrop = document.createElement('div');\n          backdrop.className = this._config.className;\n          if (this._config.isAnimated) {\n            backdrop.classList.add(CLASS_NAME_FADE$4);\n          }\n          this._element = backdrop;\n        }\n        return this._element;\n      }\n    }, {\n      key: \"_configAfterMerge\",\n      value: function _configAfterMerge(config) {\n        // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n        config.rootElement = getElement(config.rootElement);\n        return config;\n      }\n    }, {\n      key: \"_append\",\n      value: function _append() {\n        var _this20 = this;\n        if (this._isAppended) {\n          return;\n        }\n        var element = this._getElement();\n        this._config.rootElement.append(element);\n        EventHandler.on(element, EVENT_MOUSEDOWN, function () {\n          execute(_this20._config.clickCallback);\n        });\n        this._isAppended = true;\n      }\n    }, {\n      key: \"_emulateAnimation\",\n      value: function _emulateAnimation(callback) {\n        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n      }\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$8;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$8;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$9;\n      }\n    }]);\n    return Backdrop;\n  }(Config);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n  var NAME$8 = 'focustrap';\n  var DATA_KEY$5 = 'bs.focustrap';\n  var EVENT_KEY$5 = \".\".concat(DATA_KEY$5);\n  var EVENT_FOCUSIN$2 = \"focusin\".concat(EVENT_KEY$5);\n  var EVENT_KEYDOWN_TAB = \"keydown.tab\".concat(EVENT_KEY$5);\n  var TAB_KEY = 'Tab';\n  var TAB_NAV_FORWARD = 'forward';\n  var TAB_NAV_BACKWARD = 'backward';\n  var Default$7 = {\n    autofocus: true,\n    trapElement: null // The element to trap focus inside of\n  };\n\n  var DefaultType$7 = {\n    autofocus: 'boolean',\n    trapElement: 'element'\n  };\n  /**\n   * Class definition\n   */\n  var FocusTrap = /*#__PURE__*/function (_Config4) {\n    _inherits(FocusTrap, _Config4);\n    var _super9 = _createSuper(FocusTrap);\n    function FocusTrap(config) {\n      var _this21;\n      _classCallCheck(this, FocusTrap);\n      _this21 = _super9.call(this);\n      _this21._config = _this21._getConfig(config);\n      _this21._isActive = false;\n      _this21._lastTabNavDirection = null;\n      return _this21;\n    } // Getters\n    _createClass(FocusTrap, [{\n      key: \"activate\",\n      value:\n      // Public\n\n      function activate() {\n        var _this22 = this;\n        if (this._isActive) {\n          return;\n        }\n        if (this._config.autofocus) {\n          this._config.trapElement.focus();\n        }\n        EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop\n\n        EventHandler.on(document, EVENT_FOCUSIN$2, function (event) {\n          return _this22._handleFocusin(event);\n        });\n        EventHandler.on(document, EVENT_KEYDOWN_TAB, function (event) {\n          return _this22._handleKeydown(event);\n        });\n        this._isActive = true;\n      }\n    }, {\n      key: \"deactivate\",\n      value: function deactivate() {\n        if (!this._isActive) {\n          return;\n        }\n        this._isActive = false;\n        EventHandler.off(document, EVENT_KEY$5);\n      } // Private\n    }, {\n      key: \"_handleFocusin\",\n      value: function _handleFocusin(event) {\n        var trapElement = this._config.trapElement;\n        if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n          return;\n        }\n        var elements = SelectorEngine.focusableChildren(trapElement);\n        if (elements.length === 0) {\n          trapElement.focus();\n        } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n          elements[elements.length - 1].focus();\n        } else {\n          elements[0].focus();\n        }\n      }\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (event.key !== TAB_KEY) {\n          return;\n        }\n        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n      }\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$7;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$7;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$8;\n      }\n    }]);\n    return FocusTrap;\n  }(Config);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): modal.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n  var NAME$7 = 'modal';\n  var DATA_KEY$4 = 'bs.modal';\n  var EVENT_KEY$4 = \".\".concat(DATA_KEY$4);\n  var DATA_API_KEY$2 = '.data-api';\n  var ESCAPE_KEY$1 = 'Escape';\n  var EVENT_HIDE$4 = \"hide\".concat(EVENT_KEY$4);\n  var EVENT_HIDE_PREVENTED$1 = \"hidePrevented\".concat(EVENT_KEY$4);\n  var EVENT_HIDDEN$4 = \"hidden\".concat(EVENT_KEY$4);\n  var EVENT_SHOW$4 = \"show\".concat(EVENT_KEY$4);\n  var EVENT_SHOWN$4 = \"shown\".concat(EVENT_KEY$4);\n  var EVENT_RESIZE$1 = \"resize\".concat(EVENT_KEY$4);\n  var EVENT_CLICK_DISMISS = \"click.dismiss\".concat(EVENT_KEY$4);\n  var EVENT_MOUSEDOWN_DISMISS = \"mousedown.dismiss\".concat(EVENT_KEY$4);\n  var EVENT_KEYDOWN_DISMISS$1 = \"keydown.dismiss\".concat(EVENT_KEY$4);\n  var EVENT_CLICK_DATA_API$2 = \"click\".concat(EVENT_KEY$4).concat(DATA_API_KEY$2);\n  var CLASS_NAME_OPEN = 'modal-open';\n  var CLASS_NAME_FADE$3 = 'fade';\n  var CLASS_NAME_SHOW$4 = 'show';\n  var CLASS_NAME_STATIC = 'modal-static';\n  var OPEN_SELECTOR$1 = '.modal.show';\n  var SELECTOR_DIALOG = '.modal-dialog';\n  var SELECTOR_MODAL_BODY = '.modal-body';\n  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n  var Default$6 = {\n    backdrop: true,\n    focus: true,\n    keyboard: true\n  };\n  var DefaultType$6 = {\n    backdrop: '(boolean|string)',\n    focus: 'boolean',\n    keyboard: 'boolean'\n  };\n  /**\n   * Class definition\n   */\n  var Modal = /*#__PURE__*/function (_BaseComponent6) {\n    _inherits(Modal, _BaseComponent6);\n    var _super10 = _createSuper(Modal);\n    function Modal(element, config) {\n      var _this23;\n      _classCallCheck(this, Modal);\n      _this23 = _super10.call(this, element, config);\n      _this23._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, _this23._element);\n      _this23._backdrop = _this23._initializeBackDrop();\n      _this23._focustrap = _this23._initializeFocusTrap();\n      _this23._isShown = false;\n      _this23._isTransitioning = false;\n      _this23._scrollBar = new ScrollBarHelper();\n      _this23._addEventListeners();\n      return _this23;\n    } // Getters\n    _createClass(Modal, [{\n      key: \"toggle\",\n      value:\n      // Public\n\n      function toggle(relatedTarget) {\n        return this._isShown ? this.hide() : this.show(relatedTarget);\n      }\n    }, {\n      key: \"show\",\n      value: function show(relatedTarget) {\n        var _this24 = this;\n        if (this._isShown || this._isTransitioning) {\n          return;\n        }\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {\n          relatedTarget: relatedTarget\n        });\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n        this._isShown = true;\n        this._isTransitioning = true;\n        this._scrollBar.hide();\n        document.body.classList.add(CLASS_NAME_OPEN);\n        this._adjustDialog();\n        this._backdrop.show(function () {\n          return _this24._showElement(relatedTarget);\n        });\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this25 = this;\n        if (!this._isShown || this._isTransitioning) {\n          return;\n        }\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n        this._isShown = false;\n        this._isTransitioning = true;\n        this._focustrap.deactivate();\n        this._element.classList.remove(CLASS_NAME_SHOW$4);\n        this._queueCallback(function () {\n          return _this25._hideModal();\n        }, this._element, this._isAnimated());\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        for (var _i7 = 0, _arr2 = [window, this._dialog]; _i7 < _arr2.length; _i7++) {\n          var htmlElement = _arr2[_i7];\n          EventHandler.off(htmlElement, EVENT_KEY$4);\n        }\n        this._backdrop.dispose();\n        this._focustrap.deactivate();\n        _get(_getPrototypeOf(Modal.prototype), \"dispose\", this).call(this);\n      }\n    }, {\n      key: \"handleUpdate\",\n      value: function handleUpdate() {\n        this._adjustDialog();\n      } // Private\n    }, {\n      key: \"_initializeBackDrop\",\n      value: function _initializeBackDrop() {\n        return new Backdrop({\n          isVisible: Boolean(this._config.backdrop),\n          // 'static' option will be translated to true, and booleans will keep their value,\n          isAnimated: this._isAnimated()\n        });\n      }\n    }, {\n      key: \"_initializeFocusTrap\",\n      value: function _initializeFocusTrap() {\n        return new FocusTrap({\n          trapElement: this._element\n        });\n      }\n    }, {\n      key: \"_showElement\",\n      value: function _showElement(relatedTarget) {\n        var _this26 = this;\n        // try to append dynamic modal\n        if (!document.body.contains(this._element)) {\n          document.body.append(this._element);\n        }\n        this._element.style.display = 'block';\n        this._element.removeAttribute('aria-hidden');\n        this._element.setAttribute('aria-modal', true);\n        this._element.setAttribute('role', 'dialog');\n        this._element.scrollTop = 0;\n        var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n        if (modalBody) {\n          modalBody.scrollTop = 0;\n        }\n        reflow(this._element);\n        this._element.classList.add(CLASS_NAME_SHOW$4);\n        var transitionComplete = function transitionComplete() {\n          if (_this26._config.focus) {\n            _this26._focustrap.activate();\n          }\n          _this26._isTransitioning = false;\n          EventHandler.trigger(_this26._element, EVENT_SHOWN$4, {\n            relatedTarget: relatedTarget\n          });\n        };\n        this._queueCallback(transitionComplete, this._dialog, this._isAnimated());\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this27 = this;\n        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, function (event) {\n          if (event.key !== ESCAPE_KEY$1) {\n            return;\n          }\n          if (_this27._config.keyboard) {\n            event.preventDefault();\n            _this27.hide();\n            return;\n          }\n          _this27._triggerBackdropTransition();\n        });\n        EventHandler.on(window, EVENT_RESIZE$1, function () {\n          if (_this27._isShown && !_this27._isTransitioning) {\n            _this27._adjustDialog();\n          }\n        });\n        EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, function (event) {\n          // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n          EventHandler.one(_this27._element, EVENT_CLICK_DISMISS, function (event2) {\n            if (_this27._element !== event.target || _this27._element !== event2.target) {\n              return;\n            }\n            if (_this27._config.backdrop === 'static') {\n              _this27._triggerBackdropTransition();\n              return;\n            }\n            if (_this27._config.backdrop) {\n              _this27.hide();\n            }\n          });\n        });\n      }\n    }, {\n      key: \"_hideModal\",\n      value: function _hideModal() {\n        var _this28 = this;\n        this._element.style.display = 'none';\n        this._element.setAttribute('aria-hidden', true);\n        this._element.removeAttribute('aria-modal');\n        this._element.removeAttribute('role');\n        this._isTransitioning = false;\n        this._backdrop.hide(function () {\n          document.body.classList.remove(CLASS_NAME_OPEN);\n          _this28._resetAdjustments();\n          _this28._scrollBar.reset();\n          EventHandler.trigger(_this28._element, EVENT_HIDDEN$4);\n        });\n      }\n    }, {\n      key: \"_isAnimated\",\n      value: function _isAnimated() {\n        return this._element.classList.contains(CLASS_NAME_FADE$3);\n      }\n    }, {\n      key: \"_triggerBackdropTransition\",\n      value: function _triggerBackdropTransition() {\n        var _this29 = this;\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n        var initialOverflowY = this._element.style.overflowY; // return if the following background transition hasn't yet completed\n\n        if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {\n          return;\n        }\n        if (!isModalOverflowing) {\n          this._element.style.overflowY = 'hidden';\n        }\n        this._element.classList.add(CLASS_NAME_STATIC);\n        this._queueCallback(function () {\n          _this29._element.classList.remove(CLASS_NAME_STATIC);\n          _this29._queueCallback(function () {\n            _this29._element.style.overflowY = initialOverflowY;\n          }, _this29._dialog);\n        }, this._dialog);\n        this._element.focus();\n      }\n      /**\n       * The following methods are used to handle overflowing modals\n       */\n    }, {\n      key: \"_adjustDialog\",\n      value: function _adjustDialog() {\n        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n        var scrollbarWidth = this._scrollBar.getWidth();\n        var isBodyOverflowing = scrollbarWidth > 0;\n        if (isBodyOverflowing && !isModalOverflowing) {\n          var property = isRTL() ? 'paddingLeft' : 'paddingRight';\n          this._element.style[property] = \"\".concat(scrollbarWidth, \"px\");\n        }\n        if (!isBodyOverflowing && isModalOverflowing) {\n          var _property = isRTL() ? 'paddingRight' : 'paddingLeft';\n          this._element.style[_property] = \"\".concat(scrollbarWidth, \"px\");\n        }\n      }\n    }, {\n      key: \"_resetAdjustments\",\n      value: function _resetAdjustments() {\n        this._element.style.paddingLeft = '';\n        this._element.style.paddingRight = '';\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$6;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$6;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$7;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config, relatedTarget) {\n        return this.each(function () {\n          var data = Modal.getOrCreateInstance(this, config);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config](relatedTarget);\n        });\n      }\n    }]);\n    return Modal;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n    var _this30 = this;\n    var target = getElementFromSelector(this);\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n    EventHandler.one(target, EVENT_SHOW$4, function (showEvent) {\n      if (showEvent.defaultPrevented) {\n        // only register focus restorer if modal will actually get shown\n        return;\n      }\n      EventHandler.one(target, EVENT_HIDDEN$4, function () {\n        if (isVisible(_this30)) {\n          _this30.focus();\n        }\n      });\n    }); // avoid conflict when clicking modal toggler while another one is open\n\n    var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n    if (alreadyOpen) {\n      Modal.getInstance(alreadyOpen).hide();\n    }\n    var data = Modal.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  enableDismissTrigger(Modal);\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Modal);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): offcanvas.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$6 = 'offcanvas';\n  var DATA_KEY$3 = 'bs.offcanvas';\n  var EVENT_KEY$3 = \".\".concat(DATA_KEY$3);\n  var DATA_API_KEY$1 = '.data-api';\n  var EVENT_LOAD_DATA_API$2 = \"load\".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);\n  var ESCAPE_KEY = 'Escape';\n  var CLASS_NAME_SHOW$3 = 'show';\n  var CLASS_NAME_SHOWING$1 = 'showing';\n  var CLASS_NAME_HIDING = 'hiding';\n  var CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\n  var OPEN_SELECTOR = '.offcanvas.show';\n  var EVENT_SHOW$3 = \"show\".concat(EVENT_KEY$3);\n  var EVENT_SHOWN$3 = \"shown\".concat(EVENT_KEY$3);\n  var EVENT_HIDE$3 = \"hide\".concat(EVENT_KEY$3);\n  var EVENT_HIDE_PREVENTED = \"hidePrevented\".concat(EVENT_KEY$3);\n  var EVENT_HIDDEN$3 = \"hidden\".concat(EVENT_KEY$3);\n  var EVENT_RESIZE = \"resize\".concat(EVENT_KEY$3);\n  var EVENT_CLICK_DATA_API$1 = \"click\".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);\n  var EVENT_KEYDOWN_DISMISS = \"keydown.dismiss\".concat(EVENT_KEY$3);\n  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n  var Default$5 = {\n    backdrop: true,\n    keyboard: true,\n    scroll: false\n  };\n  var DefaultType$5 = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    scroll: 'boolean'\n  };\n  /**\n   * Class definition\n   */\n  var Offcanvas = /*#__PURE__*/function (_BaseComponent7) {\n    _inherits(Offcanvas, _BaseComponent7);\n    var _super11 = _createSuper(Offcanvas);\n    function Offcanvas(element, config) {\n      var _this31;\n      _classCallCheck(this, Offcanvas);\n      _this31 = _super11.call(this, element, config);\n      _this31._isShown = false;\n      _this31._backdrop = _this31._initializeBackDrop();\n      _this31._focustrap = _this31._initializeFocusTrap();\n      _this31._addEventListeners();\n      return _this31;\n    } // Getters\n    _createClass(Offcanvas, [{\n      key: \"toggle\",\n      value:\n      // Public\n\n      function toggle(relatedTarget) {\n        return this._isShown ? this.hide() : this.show(relatedTarget);\n      }\n    }, {\n      key: \"show\",\n      value: function show(relatedTarget) {\n        var _this32 = this;\n        if (this._isShown) {\n          return;\n        }\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n          relatedTarget: relatedTarget\n        });\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n        this._isShown = true;\n        this._backdrop.show();\n        if (!this._config.scroll) {\n          new ScrollBarHelper().hide();\n        }\n        this._element.setAttribute('aria-modal', true);\n        this._element.setAttribute('role', 'dialog');\n        this._element.classList.add(CLASS_NAME_SHOWING$1);\n        var completeCallBack = function completeCallBack() {\n          if (!_this32._config.scroll || _this32._config.backdrop) {\n            _this32._focustrap.activate();\n          }\n          _this32._element.classList.add(CLASS_NAME_SHOW$3);\n          _this32._element.classList.remove(CLASS_NAME_SHOWING$1);\n          EventHandler.trigger(_this32._element, EVENT_SHOWN$3, {\n            relatedTarget: relatedTarget\n          });\n        };\n        this._queueCallback(completeCallBack, this._element, true);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this33 = this;\n        if (!this._isShown) {\n          return;\n        }\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n        this._focustrap.deactivate();\n        this._element.blur();\n        this._isShown = false;\n        this._element.classList.add(CLASS_NAME_HIDING);\n        this._backdrop.hide();\n        var completeCallback = function completeCallback() {\n          _this33._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);\n          _this33._element.removeAttribute('aria-modal');\n          _this33._element.removeAttribute('role');\n          if (!_this33._config.scroll) {\n            new ScrollBarHelper().reset();\n          }\n          EventHandler.trigger(_this33._element, EVENT_HIDDEN$3);\n        };\n        this._queueCallback(completeCallback, this._element, true);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this._backdrop.dispose();\n        this._focustrap.deactivate();\n        _get(_getPrototypeOf(Offcanvas.prototype), \"dispose\", this).call(this);\n      } // Private\n    }, {\n      key: \"_initializeBackDrop\",\n      value: function _initializeBackDrop() {\n        var _this34 = this;\n        var clickCallback = function clickCallback() {\n          if (_this34._config.backdrop === 'static') {\n            EventHandler.trigger(_this34._element, EVENT_HIDE_PREVENTED);\n            return;\n          }\n          _this34.hide();\n        }; // 'static' option will be translated to true, and booleans will keep their value\n\n        var isVisible = Boolean(this._config.backdrop);\n        return new Backdrop({\n          className: CLASS_NAME_BACKDROP,\n          isVisible: isVisible,\n          isAnimated: true,\n          rootElement: this._element.parentNode,\n          clickCallback: isVisible ? clickCallback : null\n        });\n      }\n    }, {\n      key: \"_initializeFocusTrap\",\n      value: function _initializeFocusTrap() {\n        return new FocusTrap({\n          trapElement: this._element\n        });\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this35 = this;\n        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {\n          if (event.key !== ESCAPE_KEY) {\n            return;\n          }\n          if (!_this35._config.keyboard) {\n            EventHandler.trigger(_this35._element, EVENT_HIDE_PREVENTED);\n            return;\n          }\n          _this35.hide();\n        });\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$5;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$5;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$6;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Offcanvas.getOrCreateInstance(this, config);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config](this);\n        });\n      }\n    }]);\n    return Offcanvas;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n    var _this36 = this;\n    var target = getElementFromSelector(this);\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n    if (isDisabled(this)) {\n      return;\n    }\n    EventHandler.one(target, EVENT_HIDDEN$3, function () {\n      // focus on trigger when it is closed\n      if (isVisible(_this36)) {\n        _this36.focus();\n      }\n    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open\n\n    var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n    if (alreadyOpen && alreadyOpen !== target) {\n      Offcanvas.getInstance(alreadyOpen).hide();\n    }\n    var data = Offcanvas.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {\n    var _iterator17 = _createForOfIteratorHelper(SelectorEngine.find(OPEN_SELECTOR)),\n      _step17;\n    try {\n      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n        var selector = _step17.value;\n        Offcanvas.getOrCreateInstance(selector).show();\n      }\n    } catch (err) {\n      _iterator17.e(err);\n    } finally {\n      _iterator17.f();\n    }\n  });\n  EventHandler.on(window, EVENT_RESIZE, function () {\n    var _iterator18 = _createForOfIteratorHelper(SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')),\n      _step18;\n    try {\n      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n        var element = _step18.value;\n        if (getComputedStyle(element).position !== 'fixed') {\n          Offcanvas.getOrCreateInstance(element).hide();\n        }\n      }\n    } catch (err) {\n      _iterator18.e(err);\n    } finally {\n      _iterator18.f();\n    }\n  });\n  enableDismissTrigger(Offcanvas);\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Offcanvas);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\n  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n  var allowedAttribute = function allowedAttribute(attribute, allowedAttributeList) {\n    var attributeName = attribute.nodeName.toLowerCase();\n    if (allowedAttributeList.includes(attributeName)) {\n      if (uriAttributes.has(attributeName)) {\n        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n      }\n      return true;\n    } // Check if a regular expression validates the attribute.\n\n    return allowedAttributeList.filter(function (attributeRegex) {\n      return attributeRegex instanceof RegExp;\n    }).some(function (regex) {\n      return regex.test(attributeName);\n    });\n  };\n  var DefaultAllowlist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n    var _ref12;\n    if (!unsafeHtml.length) {\n      return unsafeHtml;\n    }\n    if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n      return sanitizeFunction(unsafeHtml);\n    }\n    var domParser = new window.DOMParser();\n    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n    var elements = (_ref12 = []).concat.apply(_ref12, _toConsumableArray(createdDocument.body.querySelectorAll('*')));\n    var _iterator19 = _createForOfIteratorHelper(elements),\n      _step19;\n    try {\n      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n        var _ref13;\n        var element = _step19.value;\n        var elementName = element.nodeName.toLowerCase();\n        if (!Object.keys(allowList).includes(elementName)) {\n          element.remove();\n          continue;\n        }\n        var attributeList = (_ref13 = []).concat.apply(_ref13, _toConsumableArray(element.attributes));\n        var allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n        var _iterator20 = _createForOfIteratorHelper(attributeList),\n          _step20;\n        try {\n          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n            var attribute = _step20.value;\n            if (!allowedAttribute(attribute, allowedAttributes)) {\n              element.removeAttribute(attribute.nodeName);\n            }\n          }\n        } catch (err) {\n          _iterator20.e(err);\n        } finally {\n          _iterator20.f();\n        }\n      }\n    } catch (err) {\n      _iterator19.e(err);\n    } finally {\n      _iterator19.f();\n    }\n    return createdDocument.body.innerHTML;\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/template-factory.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$5 = 'TemplateFactory';\n  var Default$4 = {\n    allowList: DefaultAllowlist,\n    content: {},\n    // { selector : text ,  selector2 : text2 , }\n    extraClass: '',\n    html: false,\n    sanitize: true,\n    sanitizeFn: null,\n    template: '<div></div>'\n  };\n  var DefaultType$4 = {\n    allowList: 'object',\n    content: 'object',\n    extraClass: '(string|function)',\n    html: 'boolean',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    template: 'string'\n  };\n  var DefaultContentType = {\n    entry: '(string|element|function|null)',\n    selector: '(string|element)'\n  };\n  /**\n   * Class definition\n   */\n  var TemplateFactory = /*#__PURE__*/function (_Config5) {\n    _inherits(TemplateFactory, _Config5);\n    var _super12 = _createSuper(TemplateFactory);\n    function TemplateFactory(config) {\n      var _this37;\n      _classCallCheck(this, TemplateFactory);\n      _this37 = _super12.call(this);\n      _this37._config = _this37._getConfig(config);\n      return _this37;\n    } // Getters\n    _createClass(TemplateFactory, [{\n      key: \"getContent\",\n      value:\n      // Public\n\n      function getContent() {\n        var _this38 = this;\n        return Object.values(this._config.content).map(function (config) {\n          return _this38._resolvePossibleFunction(config);\n        }).filter(Boolean);\n      }\n    }, {\n      key: \"hasContent\",\n      value: function hasContent() {\n        return this.getContent().length > 0;\n      }\n    }, {\n      key: \"changeContent\",\n      value: function changeContent(content) {\n        this._checkContent(content);\n        this._config.content = _objectSpread(_objectSpread({}, this._config.content), content);\n        return this;\n      }\n    }, {\n      key: \"toHtml\",\n      value: function toHtml() {\n        var templateWrapper = document.createElement('div');\n        templateWrapper.innerHTML = this._maybeSanitize(this._config.template);\n        for (var _i8 = 0, _Object$entries2 = Object.entries(this._config.content); _i8 < _Object$entries2.length; _i8++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i8], 2),\n            selector = _Object$entries2$_i[0],\n            text = _Object$entries2$_i[1];\n          this._setContent(templateWrapper, text, selector);\n        }\n        var template = templateWrapper.children[0];\n        var extraClass = this._resolvePossibleFunction(this._config.extraClass);\n        if (extraClass) {\n          var _template$classList;\n          (_template$classList = template.classList).add.apply(_template$classList, _toConsumableArray(extraClass.split(' ')));\n        }\n        return template;\n      } // Private\n    }, {\n      key: \"_typeCheckConfig\",\n      value: function _typeCheckConfig(config) {\n        _get(_getPrototypeOf(TemplateFactory.prototype), \"_typeCheckConfig\", this).call(this, config);\n        this._checkContent(config.content);\n      }\n    }, {\n      key: \"_checkContent\",\n      value: function _checkContent(arg) {\n        for (var _i9 = 0, _Object$entries3 = Object.entries(arg); _i9 < _Object$entries3.length; _i9++) {\n          var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i9], 2),\n            selector = _Object$entries3$_i[0],\n            content = _Object$entries3$_i[1];\n          _get(_getPrototypeOf(TemplateFactory.prototype), \"_typeCheckConfig\", this).call(this, {\n            selector: selector,\n            entry: content\n          }, DefaultContentType);\n        }\n      }\n    }, {\n      key: \"_setContent\",\n      value: function _setContent(template, content, selector) {\n        var templateElement = SelectorEngine.findOne(selector, template);\n        if (!templateElement) {\n          return;\n        }\n        content = this._resolvePossibleFunction(content);\n        if (!content) {\n          templateElement.remove();\n          return;\n        }\n        if (isElement$1(content)) {\n          this._putElementInTemplate(getElement(content), templateElement);\n          return;\n        }\n        if (this._config.html) {\n          templateElement.innerHTML = this._maybeSanitize(content);\n          return;\n        }\n        templateElement.textContent = content;\n      }\n    }, {\n      key: \"_maybeSanitize\",\n      value: function _maybeSanitize(arg) {\n        return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;\n      }\n    }, {\n      key: \"_resolvePossibleFunction\",\n      value: function _resolvePossibleFunction(arg) {\n        return typeof arg === 'function' ? arg(this) : arg;\n      }\n    }, {\n      key: \"_putElementInTemplate\",\n      value: function _putElementInTemplate(element, templateElement) {\n        if (this._config.html) {\n          templateElement.innerHTML = '';\n          templateElement.append(element);\n          return;\n        }\n        templateElement.textContent = element.textContent;\n      }\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$4;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$4;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$5;\n      }\n    }]);\n    return TemplateFactory;\n  }(Config);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): tooltip.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n  var NAME$4 = 'tooltip';\n  var DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\n  var CLASS_NAME_FADE$2 = 'fade';\n  var CLASS_NAME_MODAL = 'modal';\n  var CLASS_NAME_SHOW$2 = 'show';\n  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n  var SELECTOR_MODAL = \".\".concat(CLASS_NAME_MODAL);\n  var EVENT_MODAL_HIDE = 'hide.bs.modal';\n  var TRIGGER_HOVER = 'hover';\n  var TRIGGER_FOCUS = 'focus';\n  var TRIGGER_CLICK = 'click';\n  var TRIGGER_MANUAL = 'manual';\n  var EVENT_HIDE$2 = 'hide';\n  var EVENT_HIDDEN$2 = 'hidden';\n  var EVENT_SHOW$2 = 'show';\n  var EVENT_SHOWN$2 = 'shown';\n  var EVENT_INSERTED = 'inserted';\n  var EVENT_CLICK$1 = 'click';\n  var EVENT_FOCUSIN$1 = 'focusin';\n  var EVENT_FOCUSOUT$1 = 'focusout';\n  var EVENT_MOUSEENTER = 'mouseenter';\n  var EVENT_MOUSELEAVE = 'mouseleave';\n  var AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: isRTL() ? 'left' : 'right',\n    BOTTOM: 'bottom',\n    LEFT: isRTL() ? 'right' : 'left'\n  };\n  var Default$3 = {\n    allowList: DefaultAllowlist,\n    animation: true,\n    boundary: 'clippingParents',\n    container: false,\n    customClass: '',\n    delay: 0,\n    fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n    html: false,\n    offset: [0, 0],\n    placement: 'top',\n    popperConfig: null,\n    sanitize: true,\n    sanitizeFn: null,\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n    title: '',\n    trigger: 'hover focus'\n  };\n  var DefaultType$3 = {\n    allowList: 'object',\n    animation: 'boolean',\n    boundary: '(string|element)',\n    container: '(string|element|boolean)',\n    customClass: '(string|function)',\n    delay: '(number|object)',\n    fallbackPlacements: 'array',\n    html: 'boolean',\n    offset: '(array|string|function)',\n    placement: '(string|function)',\n    popperConfig: '(null|object|function)',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    selector: '(string|boolean)',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string'\n  };\n  /**\n   * Class definition\n   */\n  var Tooltip = /*#__PURE__*/function (_BaseComponent8) {\n    _inherits(Tooltip, _BaseComponent8);\n    var _super13 = _createSuper(Tooltip);\n    function Tooltip(element, config) {\n      var _this39;\n      _classCallCheck(this, Tooltip);\n      if (typeof Popper === 'undefined') {\n        throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n      }\n      _this39 = _super13.call(this, element, config); // Private\n\n      _this39._isEnabled = true;\n      _this39._timeout = 0;\n      _this39._isHovered = null;\n      _this39._activeTrigger = {};\n      _this39._popper = null;\n      _this39._templateFactory = null;\n      _this39._newContent = null; // Protected\n\n      _this39.tip = null;\n      _this39._setListeners();\n      if (!_this39._config.selector) {\n        _this39._fixTitle();\n      }\n      return _this39;\n    } // Getters\n    _createClass(Tooltip, [{\n      key: \"enable\",\n      value:\n      // Public\n\n      function enable() {\n        this._isEnabled = true;\n      }\n    }, {\n      key: \"disable\",\n      value: function disable() {\n        this._isEnabled = false;\n      }\n    }, {\n      key: \"toggleEnabled\",\n      value: function toggleEnabled() {\n        this._isEnabled = !this._isEnabled;\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        if (!this._isEnabled) {\n          return;\n        }\n        this._activeTrigger.click = !this._activeTrigger.click;\n        if (this._isShown()) {\n          this._leave();\n          return;\n        }\n        this._enter();\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        clearTimeout(this._timeout);\n        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n        if (this._element.getAttribute('data-bs-original-title')) {\n          this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));\n        }\n        this._disposePopper();\n        _get(_getPrototypeOf(Tooltip.prototype), \"dispose\", this).call(this);\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this40 = this;\n        if (this._element.style.display === 'none') {\n          throw new Error('Please use show on visible elements');\n        }\n        if (!(this._isWithContent() && this._isEnabled)) {\n          return;\n        }\n        var showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));\n        var shadowRoot = findShadowRoot(this._element);\n        var isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);\n        if (showEvent.defaultPrevented || !isInTheDom) {\n          return;\n        } // todo v6 remove this OR make it optional\n\n        this._disposePopper();\n        var tip = this._getTipElement();\n        this._element.setAttribute('aria-describedby', tip.getAttribute('id'));\n        var container = this._config.container;\n        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n          container.append(tip);\n          EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));\n        }\n        this._popper = this._createPopper(tip);\n        tip.classList.add(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref14;\n          var _iterator21 = _createForOfIteratorHelper((_ref14 = []).concat.apply(_ref14, _toConsumableArray(document.body.children))),\n            _step21;\n          try {\n            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n              var element = _step21.value;\n              EventHandler.on(element, 'mouseover', noop);\n            }\n          } catch (err) {\n            _iterator21.e(err);\n          } finally {\n            _iterator21.f();\n          }\n        }\n        var complete = function complete() {\n          EventHandler.trigger(_this40._element, _this40.constructor.eventName(EVENT_SHOWN$2));\n          if (_this40._isHovered === false) {\n            _this40._leave();\n          }\n          _this40._isHovered = false;\n        };\n        this._queueCallback(complete, this.tip, this._isAnimated());\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this41 = this;\n        if (!this._isShown()) {\n          return;\n        }\n        var hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n        var tip = this._getTipElement();\n        tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra\n        // empty mouseover listeners we added for iOS support\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref15;\n          var _iterator22 = _createForOfIteratorHelper((_ref15 = []).concat.apply(_ref15, _toConsumableArray(document.body.children))),\n            _step22;\n          try {\n            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n              var element = _step22.value;\n              EventHandler.off(element, 'mouseover', noop);\n            }\n          } catch (err) {\n            _iterator22.e(err);\n          } finally {\n            _iterator22.f();\n          }\n        }\n        this._activeTrigger[TRIGGER_CLICK] = false;\n        this._activeTrigger[TRIGGER_FOCUS] = false;\n        this._activeTrigger[TRIGGER_HOVER] = false;\n        this._isHovered = null; // it is a trick to support manual triggering\n\n        var complete = function complete() {\n          if (_this41._isWithActiveTrigger()) {\n            return;\n          }\n          if (!_this41._isHovered) {\n            _this41._disposePopper();\n          }\n          _this41._element.removeAttribute('aria-describedby');\n          EventHandler.trigger(_this41._element, _this41.constructor.eventName(EVENT_HIDDEN$2));\n        };\n        this._queueCallback(complete, this.tip, this._isAnimated());\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        if (this._popper) {\n          this._popper.update();\n        }\n      } // Protected\n    }, {\n      key: \"_isWithContent\",\n      value: function _isWithContent() {\n        return Boolean(this._getTitle());\n      }\n    }, {\n      key: \"_getTipElement\",\n      value: function _getTipElement() {\n        if (!this.tip) {\n          this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());\n        }\n        return this.tip;\n      }\n    }, {\n      key: \"_createTipElement\",\n      value: function _createTipElement(content) {\n        var tip = this._getTemplateFactory(content).toHtml(); // todo: remove this check on v6\n\n        if (!tip) {\n          return null;\n        }\n        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2); // todo: on v6 the following can be achieved with CSS only\n\n        tip.classList.add(\"bs-\".concat(this.constructor.NAME, \"-auto\"));\n        var tipId = getUID(this.constructor.NAME).toString();\n        tip.setAttribute('id', tipId);\n        if (this._isAnimated()) {\n          tip.classList.add(CLASS_NAME_FADE$2);\n        }\n        return tip;\n      }\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._newContent = content;\n        if (this._isShown()) {\n          this._disposePopper();\n          this.show();\n        }\n      }\n    }, {\n      key: \"_getTemplateFactory\",\n      value: function _getTemplateFactory(content) {\n        if (this._templateFactory) {\n          this._templateFactory.changeContent(content);\n        } else {\n          this._templateFactory = new TemplateFactory(_objectSpread(_objectSpread({}, this._config), {}, {\n            // the `content` var has to be after `this._config`\n            // to override config.content in case of popover\n            content: content,\n            extraClass: this._resolvePossibleFunction(this._config.customClass)\n          }));\n        }\n        return this._templateFactory;\n      }\n    }, {\n      key: \"_getContentForTemplate\",\n      value: function _getContentForTemplate() {\n        return _defineProperty({}, SELECTOR_TOOLTIP_INNER, this._getTitle());\n      }\n    }, {\n      key: \"_getTitle\",\n      value: function _getTitle() {\n        return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title');\n      } // Private\n    }, {\n      key: \"_initializeOnDelegatedTarget\",\n      value: function _initializeOnDelegatedTarget(event) {\n        return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n      }\n    }, {\n      key: \"_isAnimated\",\n      value: function _isAnimated() {\n        return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);\n      }\n    }, {\n      key: \"_isShown\",\n      value: function _isShown() {\n        return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);\n      }\n    }, {\n      key: \"_createPopper\",\n      value: function _createPopper(tip) {\n        var placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;\n        var attachment = AttachmentMap[placement.toUpperCase()];\n        return createPopper(this._element, tip, this._getPopperConfig(attachment));\n      }\n    }, {\n      key: \"_getOffset\",\n      value: function _getOffset() {\n        var _this42 = this;\n        var offset = this._config.offset;\n        if (typeof offset === 'string') {\n          return offset.split(',').map(function (value) {\n            return Number.parseInt(value, 10);\n          });\n        }\n        if (typeof offset === 'function') {\n          return function (popperData) {\n            return offset(popperData, _this42._element);\n          };\n        }\n        return offset;\n      }\n    }, {\n      key: \"_resolvePossibleFunction\",\n      value: function _resolvePossibleFunction(arg) {\n        return typeof arg === 'function' ? arg.call(this._element) : arg;\n      }\n    }, {\n      key: \"_getPopperConfig\",\n      value: function _getPopperConfig(attachment) {\n        var _this43 = this;\n        var defaultBsPopperConfig = {\n          placement: attachment,\n          modifiers: [{\n            name: 'flip',\n            options: {\n              fallbackPlacements: this._config.fallbackPlacements\n            }\n          }, {\n            name: 'offset',\n            options: {\n              offset: this._getOffset()\n            }\n          }, {\n            name: 'preventOverflow',\n            options: {\n              boundary: this._config.boundary\n            }\n          }, {\n            name: 'arrow',\n            options: {\n              element: \".\".concat(this.constructor.NAME, \"-arrow\")\n            }\n          }, {\n            name: 'preSetPlacement',\n            enabled: true,\n            phase: 'beforeMain',\n            fn: function fn(data) {\n              // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n              // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n              _this43._getTipElement().setAttribute('data-popper-placement', data.state.placement);\n            }\n          }]\n        };\n        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);\n      }\n    }, {\n      key: \"_setListeners\",\n      value: function _setListeners() {\n        var _this44 = this;\n        var triggers = this._config.trigger.split(' ');\n        var _iterator23 = _createForOfIteratorHelper(triggers),\n          _step23;\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var trigger = _step23.value;\n            if (trigger === 'click') {\n              EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, function (event) {\n                var context = _this44._initializeOnDelegatedTarget(event);\n                context.toggle();\n              });\n            } else if (trigger !== TRIGGER_MANUAL) {\n              var eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);\n              var eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);\n              EventHandler.on(this._element, eventIn, this._config.selector, function (event) {\n                var context = _this44._initializeOnDelegatedTarget(event);\n                context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n                context._enter();\n              });\n              EventHandler.on(this._element, eventOut, this._config.selector, function (event) {\n                var context = _this44._initializeOnDelegatedTarget(event);\n                context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n                context._leave();\n              });\n            }\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n        this._hideModalHandler = function () {\n          if (_this44._element) {\n            _this44.hide();\n          }\n        };\n        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n      }\n    }, {\n      key: \"_fixTitle\",\n      value: function _fixTitle() {\n        var title = this._element.getAttribute('title');\n        if (!title) {\n          return;\n        }\n        if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {\n          this._element.setAttribute('aria-label', title);\n        }\n        this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility\n\n        this._element.removeAttribute('title');\n      }\n    }, {\n      key: \"_enter\",\n      value: function _enter() {\n        var _this45 = this;\n        if (this._isShown() || this._isHovered) {\n          this._isHovered = true;\n          return;\n        }\n        this._isHovered = true;\n        this._setTimeout(function () {\n          if (_this45._isHovered) {\n            _this45.show();\n          }\n        }, this._config.delay.show);\n      }\n    }, {\n      key: \"_leave\",\n      value: function _leave() {\n        var _this46 = this;\n        if (this._isWithActiveTrigger()) {\n          return;\n        }\n        this._isHovered = false;\n        this._setTimeout(function () {\n          if (!_this46._isHovered) {\n            _this46.hide();\n          }\n        }, this._config.delay.hide);\n      }\n    }, {\n      key: \"_setTimeout\",\n      value: function _setTimeout(handler, timeout) {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(handler, timeout);\n      }\n    }, {\n      key: \"_isWithActiveTrigger\",\n      value: function _isWithActiveTrigger() {\n        return Object.values(this._activeTrigger).includes(true);\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        var dataAttributes = Manipulator.getDataAttributes(this._element);\n        for (var _i10 = 0, _Object$keys5 = Object.keys(dataAttributes); _i10 < _Object$keys5.length; _i10++) {\n          var dataAttribute = _Object$keys5[_i10];\n          if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n            delete dataAttributes[dataAttribute];\n          }\n        }\n        config = _objectSpread(_objectSpread({}, dataAttributes), _typeof(config) === 'object' && config ? config : {});\n        config = this._mergeConfigObj(config);\n        config = this._configAfterMerge(config);\n        this._typeCheckConfig(config);\n        return config;\n      }\n    }, {\n      key: \"_configAfterMerge\",\n      value: function _configAfterMerge(config) {\n        config.container = config.container === false ? document.body : getElement(config.container);\n        if (typeof config.delay === 'number') {\n          config.delay = {\n            show: config.delay,\n            hide: config.delay\n          };\n        }\n        if (typeof config.title === 'number') {\n          config.title = config.title.toString();\n        }\n        if (typeof config.content === 'number') {\n          config.content = config.content.toString();\n        }\n        return config;\n      }\n    }, {\n      key: \"_getDelegateConfig\",\n      value: function _getDelegateConfig() {\n        var config = {};\n        for (var key in this._config) {\n          if (this.constructor.Default[key] !== this._config[key]) {\n            config[key] = this._config[key];\n          }\n        }\n        config.selector = false;\n        config.trigger = 'manual'; // In the future can be replaced with:\n        // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n        // `Object.fromEntries(keysWithDifferentValues)`\n\n        return config;\n      }\n    }, {\n      key: \"_disposePopper\",\n      value: function _disposePopper() {\n        if (this._popper) {\n          this._popper.destroy();\n          this._popper = null;\n        }\n        if (this.tip) {\n          this.tip.remove();\n          this.tip = null;\n        }\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$3;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$3;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$4;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Tooltip.getOrCreateInstance(this, config);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config]();\n        });\n      }\n    }]);\n    return Tooltip;\n  }(BaseComponent);\n  /**\n   * jQuery\n   */\n  defineJQueryPlugin(Tooltip);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): popover.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$3 = 'popover';\n  var SELECTOR_TITLE = '.popover-header';\n  var SELECTOR_CONTENT = '.popover-body';\n  var Default$2 = _objectSpread(_objectSpread({}, Tooltip.Default), {}, {\n    content: '',\n    offset: [0, 8],\n    placement: 'right',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>',\n    trigger: 'click'\n  });\n  var DefaultType$2 = _objectSpread(_objectSpread({}, Tooltip.DefaultType), {}, {\n    content: '(null|string|element|function)'\n  });\n  /**\n   * Class definition\n   */\n  var Popover = /*#__PURE__*/function (_Tooltip) {\n    _inherits(Popover, _Tooltip);\n    var _super14 = _createSuper(Popover);\n    function Popover() {\n      _classCallCheck(this, Popover);\n      return _super14.apply(this, arguments);\n    }\n    _createClass(Popover, [{\n      key: \"_isWithContent\",\n      value:\n      // Overrides\n\n      function _isWithContent() {\n        return this._getTitle() || this._getContent();\n      } // Private\n    }, {\n      key: \"_getContentForTemplate\",\n      value: function _getContentForTemplate() {\n        var _ref17;\n        return _ref17 = {}, _defineProperty(_ref17, SELECTOR_TITLE, this._getTitle()), _defineProperty(_ref17, SELECTOR_CONTENT, this._getContent()), _ref17;\n      }\n    }, {\n      key: \"_getContent\",\n      value: function _getContent() {\n        return this._resolvePossibleFunction(this._config.content);\n      } // Static\n    }], [{\n      key: \"Default\",\n      get:\n      // Getters\n      function get() {\n        return Default$2;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$2;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$3;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Popover.getOrCreateInstance(this, config);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config]();\n        });\n      }\n    }]);\n    return Popover;\n  }(Tooltip);\n  /**\n   * jQuery\n   */\n  defineJQueryPlugin(Popover);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): scrollspy.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$2 = 'scrollspy';\n  var DATA_KEY$2 = 'bs.scrollspy';\n  var EVENT_KEY$2 = \".\".concat(DATA_KEY$2);\n  var DATA_API_KEY = '.data-api';\n  var EVENT_ACTIVATE = \"activate\".concat(EVENT_KEY$2);\n  var EVENT_CLICK = \"click\".concat(EVENT_KEY$2);\n  var EVENT_LOAD_DATA_API$1 = \"load\".concat(EVENT_KEY$2).concat(DATA_API_KEY);\n  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n  var CLASS_NAME_ACTIVE$1 = 'active';\n  var SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\n  var SELECTOR_TARGET_LINKS = '[href]';\n  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n  var SELECTOR_NAV_LINKS = '.nav-link';\n  var SELECTOR_NAV_ITEMS = '.nav-item';\n  var SELECTOR_LIST_ITEMS = '.list-group-item';\n  var SELECTOR_LINK_ITEMS = \"\".concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_NAV_ITEMS, \" > \").concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_LIST_ITEMS);\n  var SELECTOR_DROPDOWN = '.dropdown';\n  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n  var Default$1 = {\n    offset: null,\n    // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n    rootMargin: '0px 0px -25%',\n    smoothScroll: false,\n    target: null,\n    threshold: [0.1, 0.5, 1]\n  };\n  var DefaultType$1 = {\n    offset: '(number|null)',\n    // TODO v6 @deprecated, keep it for backwards compatibility reasons\n    rootMargin: 'string',\n    smoothScroll: 'boolean',\n    target: 'element',\n    threshold: 'array'\n  };\n  /**\n   * Class definition\n   */\n  var ScrollSpy = /*#__PURE__*/function (_BaseComponent9) {\n    _inherits(ScrollSpy, _BaseComponent9);\n    var _super15 = _createSuper(ScrollSpy);\n    function ScrollSpy(element, config) {\n      var _this47;\n      _classCallCheck(this, ScrollSpy);\n      _this47 = _super15.call(this, element, config); // this._element is the observablesContainer and config.target the menu links wrapper\n\n      _this47._targetLinks = new Map();\n      _this47._observableSections = new Map();\n      _this47._rootElement = getComputedStyle(_this47._element).overflowY === 'visible' ? null : _this47._element;\n      _this47._activeTarget = null;\n      _this47._observer = null;\n      _this47._previousScrollData = {\n        visibleEntryTop: 0,\n        parentScrollTop: 0\n      };\n      _this47.refresh(); // initialize\n      return _this47;\n    } // Getters\n    _createClass(ScrollSpy, [{\n      key: \"refresh\",\n      value:\n      // Public\n\n      function refresh() {\n        this._initializeTargetsAndObservables();\n        this._maybeEnableSmoothScroll();\n        if (this._observer) {\n          this._observer.disconnect();\n        } else {\n          this._observer = this._getNewObserver();\n        }\n        var _iterator24 = _createForOfIteratorHelper(this._observableSections.values()),\n          _step24;\n        try {\n          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n            var section = _step24.value;\n            this._observer.observe(section);\n          }\n        } catch (err) {\n          _iterator24.e(err);\n        } finally {\n          _iterator24.f();\n        }\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this._observer.disconnect();\n        _get(_getPrototypeOf(ScrollSpy.prototype), \"dispose\", this).call(this);\n      } // Private\n    }, {\n      key: \"_configAfterMerge\",\n      value: function _configAfterMerge(config) {\n        // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n        config.target = getElement(config.target) || document.body; // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n\n        config.rootMargin = config.offset ? \"\".concat(config.offset, \"px 0px -30%\") : config.rootMargin;\n        if (typeof config.threshold === 'string') {\n          config.threshold = config.threshold.split(',').map(function (value) {\n            return Number.parseFloat(value);\n          });\n        }\n        return config;\n      }\n    }, {\n      key: \"_maybeEnableSmoothScroll\",\n      value: function _maybeEnableSmoothScroll() {\n        var _this48 = this;\n        if (!this._config.smoothScroll) {\n          return;\n        } // unregister any previous listeners\n\n        EventHandler.off(this._config.target, EVENT_CLICK);\n        EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, function (event) {\n          var observableSection = _this48._observableSections.get(event.target.hash);\n          if (observableSection) {\n            event.preventDefault();\n            var root = _this48._rootElement || window;\n            var height = observableSection.offsetTop - _this48._element.offsetTop;\n            if (root.scrollTo) {\n              root.scrollTo({\n                top: height,\n                behavior: 'smooth'\n              });\n              return;\n            } // Chrome 60 doesn't support `scrollTo`\n\n            root.scrollTop = height;\n          }\n        });\n      }\n    }, {\n      key: \"_getNewObserver\",\n      value: function _getNewObserver() {\n        var _this49 = this;\n        var options = {\n          root: this._rootElement,\n          threshold: this._config.threshold,\n          rootMargin: this._config.rootMargin\n        };\n        return new IntersectionObserver(function (entries) {\n          return _this49._observerCallback(entries);\n        }, options);\n      } // The logic of selection\n    }, {\n      key: \"_observerCallback\",\n      value: function _observerCallback(entries) {\n        var _this50 = this;\n        var targetElement = function targetElement(entry) {\n          return _this50._targetLinks.get(\"#\".concat(entry.target.id));\n        };\n        var activate = function activate(entry) {\n          _this50._previousScrollData.visibleEntryTop = entry.target.offsetTop;\n          _this50._process(targetElement(entry));\n        };\n        var parentScrollTop = (this._rootElement || document.documentElement).scrollTop;\n        var userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;\n        this._previousScrollData.parentScrollTop = parentScrollTop;\n        var _iterator25 = _createForOfIteratorHelper(entries),\n          _step25;\n        try {\n          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n            var entry = _step25.value;\n            if (!entry.isIntersecting) {\n              this._activeTarget = null;\n              this._clearActiveClass(targetElement(entry));\n              continue;\n            }\n            var entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop; // if we are scrolling down, pick the bigger offsetTop\n\n            if (userScrollsDown && entryIsLowerThanPrevious) {\n              activate(entry); // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n\n              if (!parentScrollTop) {\n                return;\n              }\n              continue;\n            } // if we are scrolling up, pick the smallest offsetTop\n\n            if (!userScrollsDown && !entryIsLowerThanPrevious) {\n              activate(entry);\n            }\n          }\n        } catch (err) {\n          _iterator25.e(err);\n        } finally {\n          _iterator25.f();\n        }\n      }\n    }, {\n      key: \"_initializeTargetsAndObservables\",\n      value: function _initializeTargetsAndObservables() {\n        this._targetLinks = new Map();\n        this._observableSections = new Map();\n        var targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);\n        var _iterator26 = _createForOfIteratorHelper(targetLinks),\n          _step26;\n        try {\n          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n            var anchor = _step26.value;\n            // ensure that the anchor has an id and is not disabled\n            if (!anchor.hash || isDisabled(anchor)) {\n              continue;\n            }\n            var observableSection = SelectorEngine.findOne(anchor.hash, this._element); // ensure that the observableSection exists & is visible\n\n            if (isVisible(observableSection)) {\n              this._targetLinks.set(anchor.hash, anchor);\n              this._observableSections.set(anchor.hash, observableSection);\n            }\n          }\n        } catch (err) {\n          _iterator26.e(err);\n        } finally {\n          _iterator26.f();\n        }\n      }\n    }, {\n      key: \"_process\",\n      value: function _process(target) {\n        if (this._activeTarget === target) {\n          return;\n        }\n        this._clearActiveClass(this._config.target);\n        this._activeTarget = target;\n        target.classList.add(CLASS_NAME_ACTIVE$1);\n        this._activateParents(target);\n        EventHandler.trigger(this._element, EVENT_ACTIVATE, {\n          relatedTarget: target\n        });\n      }\n    }, {\n      key: \"_activateParents\",\n      value: function _activateParents(target) {\n        // Activate dropdown parents\n        if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n          SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);\n          return;\n        }\n        var _iterator27 = _createForOfIteratorHelper(SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)),\n          _step27;\n        try {\n          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n            var listGroup = _step27.value;\n            // Set triggered links parents as active\n            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n            var _iterator28 = _createForOfIteratorHelper(SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)),\n              _step28;\n            try {\n              for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n                var item = _step28.value;\n                item.classList.add(CLASS_NAME_ACTIVE$1);\n              }\n            } catch (err) {\n              _iterator28.e(err);\n            } finally {\n              _iterator28.f();\n            }\n          }\n        } catch (err) {\n          _iterator27.e(err);\n        } finally {\n          _iterator27.f();\n        }\n      }\n    }, {\n      key: \"_clearActiveClass\",\n      value: function _clearActiveClass(parent) {\n        parent.classList.remove(CLASS_NAME_ACTIVE$1);\n        var activeNodes = SelectorEngine.find(\"\".concat(SELECTOR_TARGET_LINKS, \".\").concat(CLASS_NAME_ACTIVE$1), parent);\n        var _iterator29 = _createForOfIteratorHelper(activeNodes),\n          _step29;\n        try {\n          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n            var node = _step29.value;\n            node.classList.remove(CLASS_NAME_ACTIVE$1);\n          }\n        } catch (err) {\n          _iterator29.e(err);\n        } finally {\n          _iterator29.f();\n        }\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$1;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$1;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$2;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = ScrollSpy.getOrCreateInstance(this, config);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config]();\n        });\n      }\n    }]);\n    return ScrollSpy;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {\n    var _iterator30 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_SPY)),\n      _step30;\n    try {\n      for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n        var spy = _step30.value;\n        ScrollSpy.getOrCreateInstance(spy);\n      }\n    } catch (err) {\n      _iterator30.e(err);\n    } finally {\n      _iterator30.f();\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(ScrollSpy);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): tab.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME$1 = 'tab';\n  var DATA_KEY$1 = 'bs.tab';\n  var EVENT_KEY$1 = \".\".concat(DATA_KEY$1);\n  var EVENT_HIDE$1 = \"hide\".concat(EVENT_KEY$1);\n  var EVENT_HIDDEN$1 = \"hidden\".concat(EVENT_KEY$1);\n  var EVENT_SHOW$1 = \"show\".concat(EVENT_KEY$1);\n  var EVENT_SHOWN$1 = \"shown\".concat(EVENT_KEY$1);\n  var EVENT_CLICK_DATA_API = \"click\".concat(EVENT_KEY$1);\n  var EVENT_KEYDOWN = \"keydown\".concat(EVENT_KEY$1);\n  var EVENT_LOAD_DATA_API = \"load\".concat(EVENT_KEY$1);\n  var ARROW_LEFT_KEY = 'ArrowLeft';\n  var ARROW_RIGHT_KEY = 'ArrowRight';\n  var ARROW_UP_KEY = 'ArrowUp';\n  var ARROW_DOWN_KEY = 'ArrowDown';\n  var CLASS_NAME_ACTIVE = 'active';\n  var CLASS_NAME_FADE$1 = 'fade';\n  var CLASS_NAME_SHOW$1 = 'show';\n  var CLASS_DROPDOWN = 'dropdown';\n  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n  var SELECTOR_DROPDOWN_MENU = '.dropdown-menu';\n  var NOT_SELECTOR_DROPDOWN_TOGGLE = ':not(.dropdown-toggle)';\n  var SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]';\n  var SELECTOR_OUTER = '.nav-item, .list-group-item';\n  var SELECTOR_INNER = \".nav-link\".concat(NOT_SELECTOR_DROPDOWN_TOGGLE, \", .list-group-item\").concat(NOT_SELECTOR_DROPDOWN_TOGGLE, \", [role=\\\"tab\\\"]\").concat(NOT_SELECTOR_DROPDOWN_TOGGLE);\n  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]'; // todo:v6: could be only `tab`\n\n  var SELECTOR_INNER_ELEM = \"\".concat(SELECTOR_INNER, \", \").concat(SELECTOR_DATA_TOGGLE);\n  var SELECTOR_DATA_TOGGLE_ACTIVE = \".\".concat(CLASS_NAME_ACTIVE, \"[data-bs-toggle=\\\"tab\\\"], .\").concat(CLASS_NAME_ACTIVE, \"[data-bs-toggle=\\\"pill\\\"], .\").concat(CLASS_NAME_ACTIVE, \"[data-bs-toggle=\\\"list\\\"]\");\n  /**\n   * Class definition\n   */\n  var Tab = /*#__PURE__*/function (_BaseComponent10) {\n    _inherits(Tab, _BaseComponent10);\n    var _super16 = _createSuper(Tab);\n    function Tab(element) {\n      var _this51;\n      _classCallCheck(this, Tab);\n      _this51 = _super16.call(this, element);\n      _this51._parent = _this51._element.closest(SELECTOR_TAB_PANEL);\n      if (!_this51._parent) {\n        return _possibleConstructorReturn(_this51); // todo: should Throw exception on v6\n        // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n      } // Set up initial aria attributes\n\n      _this51._setInitialAttributes(_this51._parent, _this51._getChildren());\n      EventHandler.on(_this51._element, EVENT_KEYDOWN, function (event) {\n        return _this51._keydown(event);\n      });\n      return _this51;\n    } // Getters\n    _createClass(Tab, [{\n      key: \"show\",\n      value:\n      // Public\n\n      function show() {\n        // Shows this elem and deactivate the active sibling if exists\n        var innerElem = this._element;\n        if (this._elemIsActive(innerElem)) {\n          return;\n        } // Search for active tab on same parent to deactivate it\n\n        var active = this._getActiveElem();\n        var hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {\n          relatedTarget: innerElem\n        }) : null;\n        var showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {\n          relatedTarget: active\n        });\n        if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {\n          return;\n        }\n        this._deactivate(active, innerElem);\n        this._activate(innerElem, active);\n      } // Private\n    }, {\n      key: \"_activate\",\n      value: function _activate(element, relatedElem) {\n        var _this52 = this;\n        if (!element) {\n          return;\n        }\n        element.classList.add(CLASS_NAME_ACTIVE);\n        this._activate(getElementFromSelector(element)); // Search and activate/show the proper section\n\n        var complete = function complete() {\n          if (element.getAttribute('role') !== 'tab') {\n            element.classList.add(CLASS_NAME_SHOW$1);\n            return;\n          }\n          element.removeAttribute('tabindex');\n          element.setAttribute('aria-selected', true);\n          _this52._toggleDropDown(element, true);\n          EventHandler.trigger(element, EVENT_SHOWN$1, {\n            relatedTarget: relatedElem\n          });\n        };\n        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n      }\n    }, {\n      key: \"_deactivate\",\n      value: function _deactivate(element, relatedElem) {\n        var _this53 = this;\n        if (!element) {\n          return;\n        }\n        element.classList.remove(CLASS_NAME_ACTIVE);\n        element.blur();\n        this._deactivate(getElementFromSelector(element)); // Search and deactivate the shown section too\n\n        var complete = function complete() {\n          if (element.getAttribute('role') !== 'tab') {\n            element.classList.remove(CLASS_NAME_SHOW$1);\n            return;\n          }\n          element.setAttribute('aria-selected', false);\n          element.setAttribute('tabindex', '-1');\n          _this53._toggleDropDown(element, false);\n          EventHandler.trigger(element, EVENT_HIDDEN$1, {\n            relatedTarget: relatedElem\n          });\n        };\n        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n      }\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(event) {\n        if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {\n          return;\n        }\n        event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n\n        event.preventDefault();\n        var isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);\n        var nextActiveElement = getNextActiveElement(this._getChildren().filter(function (element) {\n          return !isDisabled(element);\n        }), event.target, isNext, true);\n        if (nextActiveElement) {\n          nextActiveElement.focus({\n            preventScroll: true\n          });\n          Tab.getOrCreateInstance(nextActiveElement).show();\n        }\n      }\n    }, {\n      key: \"_getChildren\",\n      value: function _getChildren() {\n        // collection of inner elements\n        return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);\n      }\n    }, {\n      key: \"_getActiveElem\",\n      value: function _getActiveElem() {\n        var _this54 = this;\n        return this._getChildren().find(function (child) {\n          return _this54._elemIsActive(child);\n        }) || null;\n      }\n    }, {\n      key: \"_setInitialAttributes\",\n      value: function _setInitialAttributes(parent, children) {\n        this._setAttributeIfNotExists(parent, 'role', 'tablist');\n        var _iterator31 = _createForOfIteratorHelper(children),\n          _step31;\n        try {\n          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n            var child = _step31.value;\n            this._setInitialAttributesOnChild(child);\n          }\n        } catch (err) {\n          _iterator31.e(err);\n        } finally {\n          _iterator31.f();\n        }\n      }\n    }, {\n      key: \"_setInitialAttributesOnChild\",\n      value: function _setInitialAttributesOnChild(child) {\n        child = this._getInnerElement(child);\n        var isActive = this._elemIsActive(child);\n        var outerElem = this._getOuterElement(child);\n        child.setAttribute('aria-selected', isActive);\n        if (outerElem !== child) {\n          this._setAttributeIfNotExists(outerElem, 'role', 'presentation');\n        }\n        if (!isActive) {\n          child.setAttribute('tabindex', '-1');\n        }\n        this._setAttributeIfNotExists(child, 'role', 'tab'); // set attributes to the related panel too\n\n        this._setInitialAttributesOnTargetPanel(child);\n      }\n    }, {\n      key: \"_setInitialAttributesOnTargetPanel\",\n      value: function _setInitialAttributesOnTargetPanel(child) {\n        var target = getElementFromSelector(child);\n        if (!target) {\n          return;\n        }\n        this._setAttributeIfNotExists(target, 'role', 'tabpanel');\n        if (child.id) {\n          this._setAttributeIfNotExists(target, 'aria-labelledby', \"#\".concat(child.id));\n        }\n      }\n    }, {\n      key: \"_toggleDropDown\",\n      value: function _toggleDropDown(element, open) {\n        var outerElem = this._getOuterElement(element);\n        if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n          return;\n        }\n        var toggle = function toggle(selector, className) {\n          var element = SelectorEngine.findOne(selector, outerElem);\n          if (element) {\n            element.classList.toggle(className, open);\n          }\n        };\n        toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);\n        toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);\n        outerElem.setAttribute('aria-expanded', open);\n      }\n    }, {\n      key: \"_setAttributeIfNotExists\",\n      value: function _setAttributeIfNotExists(element, attribute, value) {\n        if (!element.hasAttribute(attribute)) {\n          element.setAttribute(attribute, value);\n        }\n      }\n    }, {\n      key: \"_elemIsActive\",\n      value: function _elemIsActive(elem) {\n        return elem.classList.contains(CLASS_NAME_ACTIVE);\n      } // Try to get the inner element (usually the .nav-link)\n    }, {\n      key: \"_getInnerElement\",\n      value: function _getInnerElement(elem) {\n        return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);\n      } // Try to get the outer element (usually the .nav-item)\n    }, {\n      key: \"_getOuterElement\",\n      value: function _getOuterElement(elem) {\n        return elem.closest(SELECTOR_OUTER) || elem;\n      } // Static\n    }], [{\n      key: \"NAME\",\n      get: function get() {\n        return NAME$1;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Tab.getOrCreateInstance(this);\n          if (typeof config !== 'string') {\n            return;\n          }\n          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n          data[config]();\n        });\n      }\n    }]);\n    return Tab;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n    if (isDisabled(this)) {\n      return;\n    }\n    Tab.getOrCreateInstance(this).show();\n  });\n  /**\n   * Initialize on focus\n   */\n\n  EventHandler.on(window, EVENT_LOAD_DATA_API, function () {\n    var _iterator32 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)),\n      _step32;\n    try {\n      for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n        var element = _step32.value;\n        Tab.getOrCreateInstance(element);\n      }\n    } catch (err) {\n      _iterator32.e(err);\n    } finally {\n      _iterator32.f();\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Tab);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): toast.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  var NAME = 'toast';\n  var DATA_KEY = 'bs.toast';\n  var EVENT_KEY = \".\".concat(DATA_KEY);\n  var EVENT_MOUSEOVER = \"mouseover\".concat(EVENT_KEY);\n  var EVENT_MOUSEOUT = \"mouseout\".concat(EVENT_KEY);\n  var EVENT_FOCUSIN = \"focusin\".concat(EVENT_KEY);\n  var EVENT_FOCUSOUT = \"focusout\".concat(EVENT_KEY);\n  var EVENT_HIDE = \"hide\".concat(EVENT_KEY);\n  var EVENT_HIDDEN = \"hidden\".concat(EVENT_KEY);\n  var EVENT_SHOW = \"show\".concat(EVENT_KEY);\n  var EVENT_SHOWN = \"shown\".concat(EVENT_KEY);\n  var CLASS_NAME_FADE = 'fade';\n  var CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n\n  var CLASS_NAME_SHOW = 'show';\n  var CLASS_NAME_SHOWING = 'showing';\n  var DefaultType = {\n    animation: 'boolean',\n    autohide: 'boolean',\n    delay: 'number'\n  };\n  var Default = {\n    animation: true,\n    autohide: true,\n    delay: 5000\n  };\n  /**\n   * Class definition\n   */\n  var Toast = /*#__PURE__*/function (_BaseComponent11) {\n    _inherits(Toast, _BaseComponent11);\n    var _super17 = _createSuper(Toast);\n    function Toast(element, config) {\n      var _this55;\n      _classCallCheck(this, Toast);\n      _this55 = _super17.call(this, element, config);\n      _this55._timeout = null;\n      _this55._hasMouseInteraction = false;\n      _this55._hasKeyboardInteraction = false;\n      _this55._setListeners();\n      return _this55;\n    } // Getters\n    _createClass(Toast, [{\n      key: \"show\",\n      value:\n      // Public\n\n      function show() {\n        var _this56 = this;\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n        this._clearTimeout();\n        if (this._config.animation) {\n          this._element.classList.add(CLASS_NAME_FADE);\n        }\n        var complete = function complete() {\n          _this56._element.classList.remove(CLASS_NAME_SHOWING);\n          EventHandler.trigger(_this56._element, EVENT_SHOWN);\n          _this56._maybeScheduleHide();\n        };\n        this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n\n        reflow(this._element);\n        this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);\n        this._queueCallback(complete, this._element, this._config.animation);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this57 = this;\n        if (!this.isShown()) {\n          return;\n        }\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n        var complete = function complete() {\n          _this57._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n\n          _this57._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);\n          EventHandler.trigger(_this57._element, EVENT_HIDDEN);\n        };\n        this._element.classList.add(CLASS_NAME_SHOWING);\n        this._queueCallback(complete, this._element, this._config.animation);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this._clearTimeout();\n        if (this.isShown()) {\n          this._element.classList.remove(CLASS_NAME_SHOW);\n        }\n        _get(_getPrototypeOf(Toast.prototype), \"dispose\", this).call(this);\n      }\n    }, {\n      key: \"isShown\",\n      value: function isShown() {\n        return this._element.classList.contains(CLASS_NAME_SHOW);\n      } // Private\n    }, {\n      key: \"_maybeScheduleHide\",\n      value: function _maybeScheduleHide() {\n        var _this58 = this;\n        if (!this._config.autohide) {\n          return;\n        }\n        if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n          return;\n        }\n        this._timeout = setTimeout(function () {\n          _this58.hide();\n        }, this._config.delay);\n      }\n    }, {\n      key: \"_onInteraction\",\n      value: function _onInteraction(event, isInteracting) {\n        switch (event.type) {\n          case 'mouseover':\n          case 'mouseout':\n            {\n              this._hasMouseInteraction = isInteracting;\n              break;\n            }\n          case 'focusin':\n          case 'focusout':\n            {\n              this._hasKeyboardInteraction = isInteracting;\n              break;\n            }\n        }\n        if (isInteracting) {\n          this._clearTimeout();\n          return;\n        }\n        var nextElement = event.relatedTarget;\n        if (this._element === nextElement || this._element.contains(nextElement)) {\n          return;\n        }\n        this._maybeScheduleHide();\n      }\n    }, {\n      key: \"_setListeners\",\n      value: function _setListeners() {\n        var _this59 = this;\n        EventHandler.on(this._element, EVENT_MOUSEOVER, function (event) {\n          return _this59._onInteraction(event, true);\n        });\n        EventHandler.on(this._element, EVENT_MOUSEOUT, function (event) {\n          return _this59._onInteraction(event, false);\n        });\n        EventHandler.on(this._element, EVENT_FOCUSIN, function (event) {\n          return _this59._onInteraction(event, true);\n        });\n        EventHandler.on(this._element, EVENT_FOCUSOUT, function (event) {\n          return _this59._onInteraction(event, false);\n        });\n      }\n    }, {\n      key: \"_clearTimeout\",\n      value: function _clearTimeout() {\n        clearTimeout(this._timeout);\n        this._timeout = null;\n      } // Static\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Toast.getOrCreateInstance(this, config);\n          if (typeof config === 'string') {\n            if (typeof data[config] === 'undefined') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n            data[config](this);\n          }\n        });\n      }\n    }]);\n    return Toast;\n  }(BaseComponent);\n  /**\n   * Data API implementation\n   */\n  enableDismissTrigger(Toast);\n  /**\n   * jQuery\n   */\n\n  defineJQueryPlugin(Toast);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): index.umd.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var index_umd = {\n    Alert: Alert,\n    Button: Button,\n    Carousel: Carousel,\n    Collapse: Collapse,\n    Dropdown: Dropdown,\n    Modal: Modal,\n    Offcanvas: Offcanvas,\n    Popover: Popover,\n    ScrollSpy: ScrollSpy,\n    Tab: Tab,\n    Toast: Toast,\n    Tooltip: Tooltip\n  };\n  return index_umd;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/bootstrap.bundle.js\n");

/***/ }),

/***/ "./resources/js/user/app.js":
/*!**********************************!*\
  !*** ./resources/js/user/app.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _bootstrap_bundle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap.bundle */ "./resources/js/bootstrap.bundle.js");
/* harmony import */ var _bootstrap_bundle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bootstrap_bundle__WEBPACK_IMPORTED_MODULE_0__);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/user/app.js");
/******/ 	
/******/ })()
;